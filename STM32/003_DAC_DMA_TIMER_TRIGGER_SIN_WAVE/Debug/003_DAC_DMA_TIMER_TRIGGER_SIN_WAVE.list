
003_DAC_DMA_TIMER_TRIGGER_SIN_WAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08003a60  08003a60  00013a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e60  08003e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2a  00000000  00000000  0002baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  0002e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bb4  00000000  00000000  0002ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c336  00000000  00000000  0004f864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c99cb  00000000  00000000  0005bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125565  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003180  00000000  00000000  001255b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a48 	.word	0x08003a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a48 	.word	0x08003a48

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96e 	b.w	8000b68 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468c      	mov	ip, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f040 8083 	bne.w	80009ba <__udivmoddi4+0x116>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4617      	mov	r7, r2
 80008b8:	d947      	bls.n	800094a <__udivmoddi4+0xa6>
 80008ba:	fab2 f282 	clz	r2, r2
 80008be:	b142      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	f1c2 0020 	rsb	r0, r2, #32
 80008c4:	fa24 f000 	lsr.w	r0, r4, r0
 80008c8:	4091      	lsls	r1, r2
 80008ca:	4097      	lsls	r7, r2
 80008cc:	ea40 0c01 	orr.w	ip, r0, r1
 80008d0:	4094      	lsls	r4, r2
 80008d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008d6:	0c23      	lsrs	r3, r4, #16
 80008d8:	fbbc f6f8 	udiv	r6, ip, r8
 80008dc:	fa1f fe87 	uxth.w	lr, r7
 80008e0:	fb08 c116 	mls	r1, r8, r6, ip
 80008e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d909      	bls.n	8000904 <__udivmoddi4+0x60>
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f6:	f080 8119 	bcs.w	8000b2c <__udivmoddi4+0x288>
 80008fa:	4299      	cmp	r1, r3
 80008fc:	f240 8116 	bls.w	8000b2c <__udivmoddi4+0x288>
 8000900:	3e02      	subs	r6, #2
 8000902:	443b      	add	r3, r7
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb3 f0f8 	udiv	r0, r3, r8
 800090c:	fb08 3310 	mls	r3, r8, r0, r3
 8000910:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000914:	fb00 fe0e 	mul.w	lr, r0, lr
 8000918:	45a6      	cmp	lr, r4
 800091a:	d909      	bls.n	8000930 <__udivmoddi4+0x8c>
 800091c:	193c      	adds	r4, r7, r4
 800091e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000922:	f080 8105 	bcs.w	8000b30 <__udivmoddi4+0x28c>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f240 8102 	bls.w	8000b30 <__udivmoddi4+0x28c>
 800092c:	3802      	subs	r0, #2
 800092e:	443c      	add	r4, r7
 8000930:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000934:	eba4 040e 	sub.w	r4, r4, lr
 8000938:	2600      	movs	r6, #0
 800093a:	b11d      	cbz	r5, 8000944 <__udivmoddi4+0xa0>
 800093c:	40d4      	lsrs	r4, r2
 800093e:	2300      	movs	r3, #0
 8000940:	e9c5 4300 	strd	r4, r3, [r5]
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	b902      	cbnz	r2, 800094e <__udivmoddi4+0xaa>
 800094c:	deff      	udf	#255	; 0xff
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	2a00      	cmp	r2, #0
 8000954:	d150      	bne.n	80009f8 <__udivmoddi4+0x154>
 8000956:	1bcb      	subs	r3, r1, r7
 8000958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800095c:	fa1f f887 	uxth.w	r8, r7
 8000960:	2601      	movs	r6, #1
 8000962:	fbb3 fcfe 	udiv	ip, r3, lr
 8000966:	0c21      	lsrs	r1, r4, #16
 8000968:	fb0e 331c 	mls	r3, lr, ip, r3
 800096c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000970:	fb08 f30c 	mul.w	r3, r8, ip
 8000974:	428b      	cmp	r3, r1
 8000976:	d907      	bls.n	8000988 <__udivmoddi4+0xe4>
 8000978:	1879      	adds	r1, r7, r1
 800097a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0xe2>
 8000980:	428b      	cmp	r3, r1
 8000982:	f200 80e9 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 8000986:	4684      	mov	ip, r0
 8000988:	1ac9      	subs	r1, r1, r3
 800098a:	b2a3      	uxth	r3, r4
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fb0e 1110 	mls	r1, lr, r0, r1
 8000994:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000998:	fb08 f800 	mul.w	r8, r8, r0
 800099c:	45a0      	cmp	r8, r4
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x10c>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x10a>
 80009a8:	45a0      	cmp	r8, r4
 80009aa:	f200 80d9 	bhi.w	8000b60 <__udivmoddi4+0x2bc>
 80009ae:	4618      	mov	r0, r3
 80009b0:	eba4 0408 	sub.w	r4, r4, r8
 80009b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009b8:	e7bf      	b.n	800093a <__udivmoddi4+0x96>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d909      	bls.n	80009d2 <__udivmoddi4+0x12e>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	f000 80b1 	beq.w	8000b26 <__udivmoddi4+0x282>
 80009c4:	2600      	movs	r6, #0
 80009c6:	e9c5 0100 	strd	r0, r1, [r5]
 80009ca:	4630      	mov	r0, r6
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	fab3 f683 	clz	r6, r3
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d14a      	bne.n	8000a70 <__udivmoddi4+0x1cc>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d302      	bcc.n	80009e4 <__udivmoddi4+0x140>
 80009de:	4282      	cmp	r2, r0
 80009e0:	f200 80b8 	bhi.w	8000b54 <__udivmoddi4+0x2b0>
 80009e4:	1a84      	subs	r4, r0, r2
 80009e6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ea:	2001      	movs	r0, #1
 80009ec:	468c      	mov	ip, r1
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d0a8      	beq.n	8000944 <__udivmoddi4+0xa0>
 80009f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009f6:	e7a5      	b.n	8000944 <__udivmoddi4+0xa0>
 80009f8:	f1c2 0320 	rsb	r3, r2, #32
 80009fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000a00:	4097      	lsls	r7, r2
 8000a02:	fa01 f002 	lsl.w	r0, r1, r2
 8000a06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a0a:	40d9      	lsrs	r1, r3
 8000a0c:	4330      	orrs	r0, r6
 8000a0e:	0c03      	lsrs	r3, r0, #16
 8000a10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a14:	fa1f f887 	uxth.w	r8, r7
 8000a18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f108 	mul.w	r1, r6, r8
 8000a24:	4299      	cmp	r1, r3
 8000a26:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2a:	d909      	bls.n	8000a40 <__udivmoddi4+0x19c>
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a32:	f080 808d 	bcs.w	8000b50 <__udivmoddi4+0x2ac>
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f240 808a 	bls.w	8000b50 <__udivmoddi4+0x2ac>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	443b      	add	r3, r7
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	b281      	uxth	r1, r0
 8000a44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a50:	fb00 f308 	mul.w	r3, r0, r8
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d907      	bls.n	8000a68 <__udivmoddi4+0x1c4>
 8000a58:	1879      	adds	r1, r7, r1
 8000a5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a5e:	d273      	bcs.n	8000b48 <__udivmoddi4+0x2a4>
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d971      	bls.n	8000b48 <__udivmoddi4+0x2a4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4439      	add	r1, r7
 8000a68:	1acb      	subs	r3, r1, r3
 8000a6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a6e:	e778      	b.n	8000962 <__udivmoddi4+0xbe>
 8000a70:	f1c6 0c20 	rsb	ip, r6, #32
 8000a74:	fa03 f406 	lsl.w	r4, r3, r6
 8000a78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a7c:	431c      	orrs	r4, r3
 8000a7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a82:	fa01 f306 	lsl.w	r3, r1, r6
 8000a86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a8e:	431f      	orrs	r7, r3
 8000a90:	0c3b      	lsrs	r3, r7, #16
 8000a92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a96:	fa1f f884 	uxth.w	r8, r4
 8000a9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aa2:	fb09 fa08 	mul.w	sl, r9, r8
 8000aa6:	458a      	cmp	sl, r1
 8000aa8:	fa02 f206 	lsl.w	r2, r2, r6
 8000aac:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x220>
 8000ab2:	1861      	adds	r1, r4, r1
 8000ab4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab8:	d248      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000aba:	458a      	cmp	sl, r1
 8000abc:	d946      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000abe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac2:	4421      	add	r1, r4
 8000ac4:	eba1 010a 	sub.w	r1, r1, sl
 8000ac8:	b2bf      	uxth	r7, r7
 8000aca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ace:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ad6:	fb00 f808 	mul.w	r8, r0, r8
 8000ada:	45b8      	cmp	r8, r7
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x24a>
 8000ade:	19e7      	adds	r7, r4, r7
 8000ae0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae4:	d22e      	bcs.n	8000b44 <__udivmoddi4+0x2a0>
 8000ae6:	45b8      	cmp	r8, r7
 8000ae8:	d92c      	bls.n	8000b44 <__udivmoddi4+0x2a0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4427      	add	r7, r4
 8000aee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af2:	eba7 0708 	sub.w	r7, r7, r8
 8000af6:	fba0 8902 	umull	r8, r9, r0, r2
 8000afa:	454f      	cmp	r7, r9
 8000afc:	46c6      	mov	lr, r8
 8000afe:	4649      	mov	r1, r9
 8000b00:	d31a      	bcc.n	8000b38 <__udivmoddi4+0x294>
 8000b02:	d017      	beq.n	8000b34 <__udivmoddi4+0x290>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x27a>
 8000b06:	ebb3 020e 	subs.w	r2, r3, lr
 8000b0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000b0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b12:	40f2      	lsrs	r2, r6
 8000b14:	ea4c 0202 	orr.w	r2, ip, r2
 8000b18:	40f7      	lsrs	r7, r6
 8000b1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	462e      	mov	r6, r5
 8000b28:	4628      	mov	r0, r5
 8000b2a:	e70b      	b.n	8000944 <__udivmoddi4+0xa0>
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	e6e9      	b.n	8000904 <__udivmoddi4+0x60>
 8000b30:	4618      	mov	r0, r3
 8000b32:	e6fd      	b.n	8000930 <__udivmoddi4+0x8c>
 8000b34:	4543      	cmp	r3, r8
 8000b36:	d2e5      	bcs.n	8000b04 <__udivmoddi4+0x260>
 8000b38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b40:	3801      	subs	r0, #1
 8000b42:	e7df      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b44:	4608      	mov	r0, r1
 8000b46:	e7d2      	b.n	8000aee <__udivmoddi4+0x24a>
 8000b48:	4660      	mov	r0, ip
 8000b4a:	e78d      	b.n	8000a68 <__udivmoddi4+0x1c4>
 8000b4c:	4681      	mov	r9, r0
 8000b4e:	e7b9      	b.n	8000ac4 <__udivmoddi4+0x220>
 8000b50:	4666      	mov	r6, ip
 8000b52:	e775      	b.n	8000a40 <__udivmoddi4+0x19c>
 8000b54:	4630      	mov	r0, r6
 8000b56:	e74a      	b.n	80009ee <__udivmoddi4+0x14a>
 8000b58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b5c:	4439      	add	r1, r7
 8000b5e:	e713      	b.n	8000988 <__udivmoddi4+0xe4>
 8000b60:	3802      	subs	r0, #2
 8000b62:	443c      	add	r4, r7
 8000b64:	e724      	b.n	80009b0 <__udivmoddi4+0x10c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0e8      	sub	sp, #416	; 0x1a0
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fab9 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f86f 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f955 	bl	8000e2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 f933 	bl	8000dec <MX_DMA_Init>
  MX_DAC_Init();
 8000b86:	f000 f8d3 	bl	8000d30 <MX_DAC_Init>
  MX_TIM6_Init();
 8000b8a:	f000 f8fb 	bl	8000d84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  for (uint16_t i = 0; i < SAMPLES; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8000b94:	e043      	b.n	8000c1e <main+0xae>
      value = (uint16_t) rint((sinf(((2*PI)/SAMPLES)*i)+1)*2048);
 8000b96:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd90 	bl	80006c0 <__aeabi_i2d>
 8000ba0:	a32c      	add	r3, pc, #176	; (adr r3, 8000c54 <main+0xe4>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f7ff fb0f 	bl	80001c8 <__aeabi_dmul>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fe0f 	bl	80007d4 <__aeabi_d2f>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	ee00 3a10 	vmov	s0, r3
 8000bbc:	f002 f9d8 	bl	8002f70 <sinf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bcc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000c48 <main+0xd8>
 8000bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd4:	ee17 0a90 	vmov	r0, s15
 8000bd8:	f7ff fd84 	bl	80006e4 <__aeabi_f2d>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	ec43 2b10 	vmov	d0, r2, r3
 8000be4:	f002 f93a 	bl	8002e5c <rint>
 8000be8:	ec53 2b10 	vmov	r2, r3, d0
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fdd0 	bl	8000794 <__aeabi_d2uiz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
      IV[i] = value < 4096 ? value : 4095;
 8000bfa:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8000bfe:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 8000c02:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c06:	428b      	cmp	r3, r1
 8000c08:	bf28      	it	cs
 8000c0a:	460b      	movcs	r3, r1
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (uint16_t i = 0; i < SAMPLES; i++) {
 8000c14:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8000c1e:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000c22:	2bc7      	cmp	r3, #199	; 0xc7
 8000c24:	d9b7      	bls.n	8000b96 <main+0x26>
    }

  HAL_DAC_Init(&hdac);
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <main+0xdc>)
 8000c28:	f000 fbe3 	bl	80013f2 <HAL_DAC_Init>
  HAL_TIM_Base_Start(&htim6);
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <main+0xe0>)
 8000c2e:	f001 ff65 	bl	8002afc <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)IV, SAMPLES, DAC_ALIGN_12B_R);
 8000c32:	1d3a      	adds	r2, r7, #4
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	23c8      	movs	r3, #200	; 0xc8
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <main+0xdc>)
 8000c3e:	f000 fbfb 	bl	8001438 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0xd2>
 8000c44:	f3af 8000 	nop.w
 8000c48:	45000000 	.word	0x45000000
 8000c4c:	20000088 	.word	0x20000088
 8000c50:	2000009c 	.word	0x2000009c
 8000c54:	ae261898 	.word	0xae261898
 8000c58:	3fa015be 	.word	0x3fa015be

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 f8ee 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <SystemClock_Config+0xd0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <SystemClock_Config+0xd0>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd0:	23a8      	movs	r3, #168	; 0xa8
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fa7b 	bl	80021dc <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cec:	f000 f8c6 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fcdc 	bl	80026cc <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d1a:	f000 f8af 	bl	8000e7c <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_DAC_Init+0x4c>)
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <MX_DAC_Init+0x50>)
 8000d42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_DAC_Init+0x4c>)
 8000d46:	f000 fb54 	bl	80013f2 <HAL_DAC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d50:	f000 f894 	bl	8000e7c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d54:	2304      	movs	r3, #4
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_DAC_Init+0x4c>)
 8000d64:	f000 fc54 	bl	8001610 <HAL_DAC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d6e:	f000 f885 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000088 	.word	0x20000088
 8000d80:	40007400 	.word	0x40007400

08000d84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <MX_TIM6_Init+0x64>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000d9a:	2229      	movs	r2, #41	; 0x29
 8000d9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000da6:	2263      	movs	r2, #99	; 0x63
 8000da8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000db2:	f001 fe53 	bl	8002a5c <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000dbc:	f000 f85e 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM6_Init+0x60>)
 8000dce:	f001 ff9d 	bl	8002d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f000 f850 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000009c 	.word	0x2000009c
 8000de8:	40001000 	.word	0x40001000

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2010      	movs	r0, #16
 8000e14:	f000 fab7 	bl	8001386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e18:	2010      	movs	r0, #16
 8000e1a:	f000 fad0 	bl	80013be <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_GPIO_Init+0x4c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fa52 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_DAC_MspInit+0xdc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d158      	bne.n	8000fac <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_DAC_MspInit+0xe0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f32:	2310      	movs	r3, #16
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <HAL_DAC_MspInit+0xe4>)
 8000f46:	f000 ffad 	bl	8001ea4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_DAC_MspInit+0xec>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f52:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000f92:	f000 fc17 	bl	80017c4 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000f9c:	f7ff ff6e 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_DAC_MspInit+0xe8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40007400 	.word	0x40007400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	40026088 	.word	0x40026088

08000fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10d      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40001000 	.word	0x40001000
 8001008:	40023800 	.word	0x40023800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f89a 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA1_Stream5_IRQHandler+0x10>)
 8001066:	f000 fcb3 	bl	80019d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000028 	.word	0x20000028

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b4:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff ffd7 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f001 fe9d 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fd51 	bl	8000b70 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010dc:	08003e68 	.word	0x08003e68
  ldr r2, =_sbss
 80010e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e4:	200000e8 	.word	0x200000e8

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f92b 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff feb2 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f943 	bl	80013da <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f90b 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200000e4 	.word	0x200000e4

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200000e4 	.word	0x200000e4

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e014      	b.n	800142e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fd5f 	bl	8000ed8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_DAC_Start_DMA+0x22>
 8001456:	2302      	movs	r3, #2
 8001458:	e0ab      	b.n	80015b2 <HAL_DAC_Start_DMA+0x17a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2201      	movs	r2, #1
 800145e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2202      	movs	r2, #2
 8001464:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d12f      	bne.n	80014cc <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_DAC_Start_DMA+0x184>)
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_DAC_Start_DMA+0x188>)
 800147a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_DAC_Start_DMA+0x18c>)
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001492:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d013      	beq.n	80014c2 <HAL_DAC_Start_DMA+0x8a>
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	2b08      	cmp	r3, #8
 800149e:	d845      	bhi.n	800152c <HAL_DAC_Start_DMA+0xf4>
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_DAC_Start_DMA+0x76>
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d005      	beq.n	80014b8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014ac:	e03e      	b.n	800152c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3308      	adds	r3, #8
 80014b4:	613b      	str	r3, [r7, #16]
        break;
 80014b6:	e03c      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	330c      	adds	r3, #12
 80014be:	613b      	str	r3, [r7, #16]
        break;
 80014c0:	e037      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3310      	adds	r3, #16
 80014c8:	613b      	str	r3, [r7, #16]
        break;
 80014ca:	e032      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a3d      	ldr	r2, [pc, #244]	; (80015c8 <HAL_DAC_Start_DMA+0x190>)
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HAL_DAC_Start_DMA+0x194>)
 80014da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <HAL_DAC_Start_DMA+0x198>)
 80014e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d013      	beq.n	8001522 <HAL_DAC_Start_DMA+0xea>
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d817      	bhi.n	8001530 <HAL_DAC_Start_DMA+0xf8>
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_DAC_Start_DMA+0xd6>
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800150c:	e010      	b.n	8001530 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3314      	adds	r3, #20
 8001514:	613b      	str	r3, [r7, #16]
        break;
 8001516:	e00c      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3318      	adds	r3, #24
 800151e:	613b      	str	r3, [r7, #16]
        break;
 8001520:	e007      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	331c      	adds	r3, #28
 8001528:	613b      	str	r3, [r7, #16]
        break;
 800152a:	e002      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        break;
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001530:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001546:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6898      	ldr	r0, [r3, #8]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	f000 f9e5 	bl	8001920 <HAL_DMA_Start_IT>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	e010      	b.n	800157e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800156a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68d8      	ldr	r0, [r3, #12]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	f000 f9d3 	bl	8001920 <HAL_DMA_Start_IT>
 800157a:	4603      	mov	r3, r0
 800157c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e005      	b.n	80015b0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080016af 	.word	0x080016af
 80015c0:	080016d1 	.word	0x080016d1
 80015c4:	080016ed 	.word	0x080016ed
 80015c8:	08001757 	.word	0x08001757
 80015cc:	08001779 	.word	0x08001779
 80015d0:	08001795 	.word	0x08001795

080015d4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	795b      	ldrb	r3, [r3, #5]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DAC_ConfigChannel+0x18>
 8001624:	2302      	movs	r3, #2
 8001626:	e03c      	b.n	80016a2 <HAL_DAC_ConfigChannel+0x92>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2202      	movs	r2, #2
 8001632:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4013      	ands	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	22c0      	movs	r2, #192	; 0xc0
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff ff89 	bl	80015d4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	711a      	strb	r2, [r3, #4]
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff ff82 	bl	80015e8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f043 0204 	orr.w	r2, r3, #4
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff ff78 	bl	80015fc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	711a      	strb	r2, [r3, #4]
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff ffd8 	bl	800171a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	711a      	strb	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff ffd1 	bl	800172e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f043 0204 	orr.w	r2, r3, #4
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ffc7 	bl	8001742 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	711a      	strb	r2, [r3, #4]
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fcf2 	bl	80011b8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e099      	b.n	8001914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	e00f      	b.n	8001822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001802:	f7ff fcd9 	bl	80011b8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b05      	cmp	r3, #5
 800180e:	d908      	bls.n	8001822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e078      	b.n	8001914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e8      	bne.n	8001802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_DMA_Init+0x158>)
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4313      	orrs	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f023 0307 	bic.w	r3, r3, #7
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d117      	bne.n	80018e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fa6f 	bl	8001dac <DMA_CheckFifoParam>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e2:	2301      	movs	r3, #1
 80018e4:	e016      	b.n	8001914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa26 	bl	8001d40 <DMA_CalcBaseAndBitshift>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f010803f 	.word	0xf010803f

08001920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_DMA_Start_IT+0x26>
 8001942:	2302      	movs	r3, #2
 8001944:	e040      	b.n	80019c8 <HAL_DMA_Start_IT+0xa8>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12f      	bne.n	80019ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f9b8 	bl	8001ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0216 	orr.w	r2, r2, #22
 800198e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_DMA_IRQHandler+0x258>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_DMA_IRQHandler+0x25c>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2208      	movs	r2, #8
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01a      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2201      	movs	r2, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2204      	movs	r2, #4
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2204      	movs	r2, #4
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2210      	movs	r2, #16
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d043      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03c      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2210      	movs	r2, #16
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e01f      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e016      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0208 	bic.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2220      	movs	r2, #32
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 808e 	beq.w	8001c6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8086 	beq.w	8001c6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2220      	movs	r2, #32
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d136      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_IRQHandler+0x1da>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	223f      	movs	r2, #63	; 0x3f
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d07d      	beq.n	8001cda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
        }
        return;
 8001be6:	e078      	b.n	8001cda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01c      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d108      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d030      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e02b      	b.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d027      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e022      	b.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d032      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2205      	movs	r2, #5
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d307      	bcc.n	8001cb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f2      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x2ca>
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cb6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cda:	bf00      	nop
    }
  }
}
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d108      	bne.n	8001d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d22:	e007      	b.n	8001d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3b10      	subs	r3, #16
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d909      	bls.n	8001d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d80:	e007      	b.n	8001d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	aaaaaaab 	.word	0xaaaaaaab
 8001da8:	08003a70 	.word	0x08003a70

08001dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11f      	bne.n	8001e06 <DMA_CheckFifoParam+0x5a>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d856      	bhi.n	8001e7a <DMA_CheckFifoParam+0xce>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <DMA_CheckFifoParam+0x28>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001df7 	.word	0x08001df7
 8001ddc:	08001de5 	.word	0x08001de5
 8001de0:	08001e7b 	.word	0x08001e7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d046      	beq.n	8001e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df4:	e043      	b.n	8001e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dfe:	d140      	bne.n	8001e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e04:	e03d      	b.n	8001e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0e:	d121      	bne.n	8001e54 <DMA_CheckFifoParam+0xa8>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d837      	bhi.n	8001e86 <DMA_CheckFifoParam+0xda>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <DMA_CheckFifoParam+0x70>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e33 	.word	0x08001e33
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001e45 	.word	0x08001e45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e30:	e030      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d025      	beq.n	8001e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e42:	e022      	b.n	8001e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e4c:	d11f      	bne.n	8001e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e52:	e01c      	b.n	8001e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d903      	bls.n	8001e62 <DMA_CheckFifoParam+0xb6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e60:	e018      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
      break;
 8001e66:	e015      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e00b      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e00a      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e008      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e006      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e004      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e002      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
    }
  } 
  
  return status; 
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e16b      	b.n	8002198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 815a 	bne.w	8002192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80b4 	beq.w	8002192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b60      	ldr	r3, [pc, #384]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a5f      	ldr	r2, [pc, #380]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a5b      	ldr	r2, [pc, #364]	; (80021b4 <HAL_GPIO_Init+0x310>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_GPIO_Init+0x314>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_GPIO_Init+0x318>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_GPIO_Init+0x31c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x320>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x21a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	; (80021c8 <HAL_GPIO_Init+0x324>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x216>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	; (80021cc <HAL_GPIO_Init+0x328>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x212>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x20a>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00e      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ca:	2300      	movs	r3, #0
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_GPIO_Init+0x310>)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_GPIO_Init+0x334>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3301      	adds	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	f67f ae90 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40021400 	.word	0x40021400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e264      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d075      	beq.n	80022e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	4ba3      	ldr	r3, [pc, #652]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00c      	beq.n	8002220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4ba0      	ldr	r3, [pc, #640]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b9d      	ldr	r3, [pc, #628]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b99      	ldr	r3, [pc, #612]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d157      	bne.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e23f      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x74>
 8002242:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a90      	ldr	r2, [pc, #576]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x98>
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a8a      	ldr	r2, [pc, #552]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002274:	4b84      	ldr	r3, [pc, #528]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a83      	ldr	r2, [pc, #524]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe ff90 	bl	80011b8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ff8c 	bl	80011b8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e204      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xc0>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff7c 	bl	80011b8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe ff78 	bl	80011b8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1f0      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c4      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4952      	ldr	r1, [pc, #328]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_RCC_OscConfig+0x2b0>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe ff31 	bl	80011b8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe ff2d 	bl	80011b8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a5      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4940      	ldr	r1, [pc, #256]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_OscConfig+0x2b0>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ff10 	bl	80011b8 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ff0c 	bl	80011b8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e184      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d030      	beq.n	8002428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x2b4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fef0 	bl	80011b8 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe feec 	bl	80011b8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e164      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x200>
 80023fa:	e015      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_OscConfig+0x2b4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fed9 	bl	80011b8 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240a:	f7fe fed5 	bl	80011b8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e14d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a0 	beq.w	8002576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe fe9b 	bl	80011b8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e011      	b.n	80024aa <HAL_RCC_OscConfig+0x2ce>
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	42470000 	.word	0x42470000
 8002490:	42470e80 	.word	0x42470e80
 8002494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe fe8e 	bl	80011b8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e106      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b85      	ldr	r3, [pc, #532]	; (80026c0 <HAL_RCC_OscConfig+0x4e4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x2f0>
 80024be:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x32a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x312>
 80024d4:	4b7b      	ldr	r3, [pc, #492]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a7a      	ldr	r2, [pc, #488]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	4b78      	ldr	r3, [pc, #480]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a77      	ldr	r2, [pc, #476]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x32a>
 80024ee:	4b75      	ldr	r3, [pc, #468]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a74      	ldr	r2, [pc, #464]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a71      	ldr	r2, [pc, #452]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe fe53 	bl	80011b8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fe4f 	bl	80011b8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0c5      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x33a>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7fe fe3d 	bl	80011b8 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fe39 	bl	80011b8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0af      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b56      	ldr	r3, [pc, #344]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a55      	ldr	r2, [pc, #340]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 809b 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d05c      	beq.n	8002646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d141      	bne.n	8002618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCC_OscConfig+0x4ec>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fe0d 	bl	80011b8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fe09 	bl	80011b8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e081      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	3b01      	subs	r3, #1
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_OscConfig+0x4ec>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fde2 	bl	80011b8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fdde 	bl	80011b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e056      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x41c>
 8002616:	e04e      	b.n	80026b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_OscConfig+0x4ec>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fdcb 	bl	80011b8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fdc7 	bl	80011b8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03f      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x44a>
 8002644:	e037      	b.n	80026b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e032      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_RCC_OscConfig+0x4e8>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d028      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d11a      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002688:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268a:	4293      	cmp	r3, r2
 800268c:	d111      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40007000 	.word	0x40007000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470060 	.word	0x42470060

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cc      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d90c      	bls.n	8002708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d044      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d119      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e067      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4934      	ldr	r1, [pc, #208]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fcfc 	bl	80011b8 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7fe fcf8 	bl	80011b8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e04f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d20c      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fc5c 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00
 8002888:	40023800 	.word	0x40023800
 800288c:	08003a60 	.word	0x08003a60
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	2300      	movs	r3, #0
 80028aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b0:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d00d      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x40>
 80028bc:	2b08      	cmp	r3, #8
 80028be:	f200 80bd 	bhi.w	8002a3c <HAL_RCC_GetSysClockFreq+0x1a4>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ca:	e0b7      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028ce:	60bb      	str	r3, [r7, #8]
       break;
 80028d0:	e0b7      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028d4:	60bb      	str	r3, [r7, #8]
      break;
 80028d6:	e0b4      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d04d      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	461a      	mov	r2, r3
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	ea02 0800 	and.w	r8, r2, r0
 8002906:	ea03 0901 	and.w	r9, r3, r1
 800290a:	4640      	mov	r0, r8
 800290c:	4649      	mov	r1, r9
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	014b      	lsls	r3, r1, #5
 8002918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800291c:	0142      	lsls	r2, r0, #5
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	ebb0 0008 	subs.w	r0, r0, r8
 8002926:	eb61 0109 	sbc.w	r1, r1, r9
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	018b      	lsls	r3, r1, #6
 8002934:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002938:	0182      	lsls	r2, r0, #6
 800293a:	1a12      	subs	r2, r2, r0
 800293c:	eb63 0301 	sbc.w	r3, r3, r1
 8002940:	f04f 0000 	mov.w	r0, #0
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	00d9      	lsls	r1, r3, #3
 800294a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800294e:	00d0      	lsls	r0, r2, #3
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	eb12 0208 	adds.w	r2, r2, r8
 8002958:	eb43 0309 	adc.w	r3, r3, r9
 800295c:	f04f 0000 	mov.w	r0, #0
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	0259      	lsls	r1, r3, #9
 8002966:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800296a:	0250      	lsls	r0, r2, #9
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	461a      	mov	r2, r3
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f7fd ff7a 	bl	8000874 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e04a      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	461a      	mov	r2, r3
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	ea02 0400 	and.w	r4, r2, r0
 80029a2:	ea03 0501 	and.w	r5, r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	014b      	lsls	r3, r1, #5
 80029b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029b8:	0142      	lsls	r2, r0, #5
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	1b00      	subs	r0, r0, r4
 80029c0:	eb61 0105 	sbc.w	r1, r1, r5
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	018b      	lsls	r3, r1, #6
 80029ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029d2:	0182      	lsls	r2, r0, #6
 80029d4:	1a12      	subs	r2, r2, r0
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	f04f 0000 	mov.w	r0, #0
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	00d9      	lsls	r1, r3, #3
 80029e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029e8:	00d0      	lsls	r0, r2, #3
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	1912      	adds	r2, r2, r4
 80029f0:	eb45 0303 	adc.w	r3, r5, r3
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	0299      	lsls	r1, r3, #10
 80029fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a02:	0290      	lsls	r0, r2, #10
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f7fd ff2e 	bl	8000874 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	60bb      	str	r3, [r7, #8]
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a3e:	60bb      	str	r3, [r7, #8]
      break;
 8002a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a42:	68bb      	ldr	r3, [r7, #8]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	007a1200 	.word	0x007a1200

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe faa0 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 f896 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e046      	b.n	8002ba2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_TIM_Base_Start+0xb4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d022      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d01d      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_TIM_Base_Start+0xb8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d018      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_TIM_Base_Start+0xbc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_TIM_Base_Start+0xc0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_TIM_Base_Start+0xc4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_TIM_Base_Start+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_TIM_Base_Start+0xcc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d010      	beq.n	8002ba0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	e007      	b.n	8002ba0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40010400 	.word	0x40010400
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40001800 	.word	0x40001800

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d00f      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3d      	ldr	r2, [pc, #244]	; (8002ce4 <TIM_Base_SetConfig+0x118>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <TIM_Base_SetConfig+0x11c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <TIM_Base_SetConfig+0x120>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2f      	ldr	r2, [pc, #188]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d027      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <TIM_Base_SetConfig+0x118>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d023      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <TIM_Base_SetConfig+0x11c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <TIM_Base_SetConfig+0x120>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d017      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <TIM_Base_SetConfig+0x128>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <TIM_Base_SetConfig+0x12c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00f      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <TIM_Base_SetConfig+0x130>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <TIM_Base_SetConfig+0x134>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <TIM_Base_SetConfig+0x138>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <TIM_Base_SetConfig+0x13c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <TIM_Base_SetConfig+0x114>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_Base_SetConfig+0xf8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <TIM_Base_SetConfig+0x124>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	40001800 	.word	0x40001800
 8002d04:	40001c00 	.word	0x40001c00
 8002d08:	40002000 	.word	0x40002000

08002d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e05a      	b.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d01d      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10c      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40001800 	.word	0x40001800

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 fe16 	bl	8003a48 <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08003e60 	.word	0x08003e60
 8002e40:	08003e60 	.word	0x08003e60
 8002e44:	08003e60 	.word	0x08003e60
 8002e48:	08003e64 	.word	0x08003e64

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <rint>:
 8002e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e5e:	ec51 0b10 	vmov	r0, r1, d0
 8002e62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002e66:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002e6a:	2e13      	cmp	r6, #19
 8002e6c:	ee10 4a10 	vmov	r4, s0
 8002e70:	460b      	mov	r3, r1
 8002e72:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8002e76:	dc58      	bgt.n	8002f2a <rint+0xce>
 8002e78:	2e00      	cmp	r6, #0
 8002e7a:	da2b      	bge.n	8002ed4 <rint+0x78>
 8002e7c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002e80:	4302      	orrs	r2, r0
 8002e82:	d023      	beq.n	8002ecc <rint+0x70>
 8002e84:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002e88:	4302      	orrs	r2, r0
 8002e8a:	4254      	negs	r4, r2
 8002e8c:	4314      	orrs	r4, r2
 8002e8e:	0c4b      	lsrs	r3, r1, #17
 8002e90:	0b24      	lsrs	r4, r4, #12
 8002e92:	045b      	lsls	r3, r3, #17
 8002e94:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8002e98:	ea44 0103 	orr.w	r1, r4, r3
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <rint+0x10c>)
 8002e9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002ea2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4630      	mov	r0, r6
 8002eac:	4639      	mov	r1, r7
 8002eae:	f7fd fabb 	bl	8000428 <__adddf3>
 8002eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	f7fd fab1 	bl	8000424 <__aeabi_dsub>
 8002ec2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ec6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8002eca:	4639      	mov	r1, r7
 8002ecc:	ec41 0b10 	vmov	d0, r0, r1
 8002ed0:	b003      	add	sp, #12
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <rint+0x110>)
 8002ed6:	4132      	asrs	r2, r6
 8002ed8:	ea01 0702 	and.w	r7, r1, r2
 8002edc:	4307      	orrs	r7, r0
 8002ede:	d0f5      	beq.n	8002ecc <rint+0x70>
 8002ee0:	0851      	lsrs	r1, r2, #1
 8002ee2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8002ee6:	4314      	orrs	r4, r2
 8002ee8:	d00c      	beq.n	8002f04 <rint+0xa8>
 8002eea:	ea23 0201 	bic.w	r2, r3, r1
 8002eee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ef2:	2e13      	cmp	r6, #19
 8002ef4:	fa43 f606 	asr.w	r6, r3, r6
 8002ef8:	bf0c      	ite	eq
 8002efa:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8002efe:	2400      	movne	r4, #0
 8002f00:	ea42 0306 	orr.w	r3, r2, r6
 8002f04:	4918      	ldr	r1, [pc, #96]	; (8002f68 <rint+0x10c>)
 8002f06:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd fa88 	bl	8000428 <__adddf3>
 8002f18:	e9cd 0100 	strd	r0, r1, [sp]
 8002f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f7fd fa7e 	bl	8000424 <__aeabi_dsub>
 8002f28:	e7d0      	b.n	8002ecc <rint+0x70>
 8002f2a:	2e33      	cmp	r6, #51	; 0x33
 8002f2c:	dd07      	ble.n	8002f3e <rint+0xe2>
 8002f2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002f32:	d1cb      	bne.n	8002ecc <rint+0x70>
 8002f34:	ee10 2a10 	vmov	r2, s0
 8002f38:	f7fd fa76 	bl	8000428 <__adddf3>
 8002f3c:	e7c6      	b.n	8002ecc <rint+0x70>
 8002f3e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8002f42:	f04f 36ff 	mov.w	r6, #4294967295
 8002f46:	40d6      	lsrs	r6, r2
 8002f48:	4230      	tst	r0, r6
 8002f4a:	d0bf      	beq.n	8002ecc <rint+0x70>
 8002f4c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8002f50:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8002f54:	bf1f      	itttt	ne
 8002f56:	ea24 0101 	bicne.w	r1, r4, r1
 8002f5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8002f5e:	fa44 f202 	asrne.w	r2, r4, r2
 8002f62:	ea41 0402 	orrne.w	r4, r1, r2
 8002f66:	e7cd      	b.n	8002f04 <rint+0xa8>
 8002f68:	08003a78 	.word	0x08003a78
 8002f6c:	000fffff 	.word	0x000fffff

08002f70 <sinf>:
 8002f70:	ee10 3a10 	vmov	r3, s0
 8002f74:	b507      	push	{r0, r1, r2, lr}
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <sinf+0x7c>)
 8002f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	dc05      	bgt.n	8002f8c <sinf+0x1c>
 8002f80:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002ff0 <sinf+0x80>
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 fc5b 	bl	8003840 <__kernel_sinf>
 8002f8a:	e004      	b.n	8002f96 <sinf+0x26>
 8002f8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f90:	db04      	blt.n	8002f9c <sinf+0x2c>
 8002f92:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002f96:	b003      	add	sp, #12
 8002f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f9c:	4668      	mov	r0, sp
 8002f9e:	f000 f829 	bl	8002ff4 <__ieee754_rem_pio2f>
 8002fa2:	f000 0003 	and.w	r0, r0, #3
 8002fa6:	2801      	cmp	r0, #1
 8002fa8:	d008      	beq.n	8002fbc <sinf+0x4c>
 8002faa:	2802      	cmp	r0, #2
 8002fac:	d00d      	beq.n	8002fca <sinf+0x5a>
 8002fae:	b9b0      	cbnz	r0, 8002fde <sinf+0x6e>
 8002fb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fb4:	ed9d 0a00 	vldr	s0, [sp]
 8002fb8:	2001      	movs	r0, #1
 8002fba:	e7e4      	b.n	8002f86 <sinf+0x16>
 8002fbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fc0:	ed9d 0a00 	vldr	s0, [sp]
 8002fc4:	f000 f952 	bl	800326c <__kernel_cosf>
 8002fc8:	e7e5      	b.n	8002f96 <sinf+0x26>
 8002fca:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fce:	ed9d 0a00 	vldr	s0, [sp]
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f000 fc34 	bl	8003840 <__kernel_sinf>
 8002fd8:	eeb1 0a40 	vneg.f32	s0, s0
 8002fdc:	e7db      	b.n	8002f96 <sinf+0x26>
 8002fde:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fe2:	ed9d 0a00 	vldr	s0, [sp]
 8002fe6:	f000 f941 	bl	800326c <__kernel_cosf>
 8002fea:	e7f5      	b.n	8002fd8 <sinf+0x68>
 8002fec:	3f490fd8 	.word	0x3f490fd8
 8002ff0:	00000000 	.word	0x00000000

08002ff4 <__ieee754_rem_pio2f>:
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	ee10 6a10 	vmov	r6, s0
 8002ffa:	4b8e      	ldr	r3, [pc, #568]	; (8003234 <__ieee754_rem_pio2f+0x240>)
 8002ffc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003000:	429d      	cmp	r5, r3
 8003002:	b087      	sub	sp, #28
 8003004:	eef0 7a40 	vmov.f32	s15, s0
 8003008:	4604      	mov	r4, r0
 800300a:	dc05      	bgt.n	8003018 <__ieee754_rem_pio2f+0x24>
 800300c:	2300      	movs	r3, #0
 800300e:	ed80 0a00 	vstr	s0, [r0]
 8003012:	6043      	str	r3, [r0, #4]
 8003014:	2000      	movs	r0, #0
 8003016:	e01a      	b.n	800304e <__ieee754_rem_pio2f+0x5a>
 8003018:	4b87      	ldr	r3, [pc, #540]	; (8003238 <__ieee754_rem_pio2f+0x244>)
 800301a:	429d      	cmp	r5, r3
 800301c:	dc46      	bgt.n	80030ac <__ieee754_rem_pio2f+0xb8>
 800301e:	2e00      	cmp	r6, #0
 8003020:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800323c <__ieee754_rem_pio2f+0x248>
 8003024:	4b86      	ldr	r3, [pc, #536]	; (8003240 <__ieee754_rem_pio2f+0x24c>)
 8003026:	f025 050f 	bic.w	r5, r5, #15
 800302a:	dd1f      	ble.n	800306c <__ieee754_rem_pio2f+0x78>
 800302c:	429d      	cmp	r5, r3
 800302e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003032:	d00e      	beq.n	8003052 <__ieee754_rem_pio2f+0x5e>
 8003034:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003244 <__ieee754_rem_pio2f+0x250>
 8003038:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800303c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003040:	ed80 0a00 	vstr	s0, [r0]
 8003044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003048:	2001      	movs	r0, #1
 800304a:	edc4 7a01 	vstr	s15, [r4, #4]
 800304e:	b007      	add	sp, #28
 8003050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003052:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003248 <__ieee754_rem_pio2f+0x254>
 8003056:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800324c <__ieee754_rem_pio2f+0x258>
 800305a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800305e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003062:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003066:	edc0 6a00 	vstr	s13, [r0]
 800306a:	e7eb      	b.n	8003044 <__ieee754_rem_pio2f+0x50>
 800306c:	429d      	cmp	r5, r3
 800306e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003072:	d00e      	beq.n	8003092 <__ieee754_rem_pio2f+0x9e>
 8003074:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003244 <__ieee754_rem_pio2f+0x250>
 8003078:	ee37 0a87 	vadd.f32	s0, s15, s14
 800307c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003080:	ed80 0a00 	vstr	s0, [r0]
 8003084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	edc4 7a01 	vstr	s15, [r4, #4]
 8003090:	e7dd      	b.n	800304e <__ieee754_rem_pio2f+0x5a>
 8003092:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003248 <__ieee754_rem_pio2f+0x254>
 8003096:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800324c <__ieee754_rem_pio2f+0x258>
 800309a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800309e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80030a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030a6:	edc0 6a00 	vstr	s13, [r0]
 80030aa:	e7eb      	b.n	8003084 <__ieee754_rem_pio2f+0x90>
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <__ieee754_rem_pio2f+0x25c>)
 80030ae:	429d      	cmp	r5, r3
 80030b0:	dc72      	bgt.n	8003198 <__ieee754_rem_pio2f+0x1a4>
 80030b2:	f000 fc0d 	bl	80038d0 <fabsf>
 80030b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003254 <__ieee754_rem_pio2f+0x260>
 80030ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80030be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80030c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ca:	ee17 0a90 	vmov	r0, s15
 80030ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800323c <__ieee754_rem_pio2f+0x248>
 80030d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80030d6:	281f      	cmp	r0, #31
 80030d8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003244 <__ieee754_rem_pio2f+0x250>
 80030dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e0:	eeb1 6a47 	vneg.f32	s12, s14
 80030e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80030e8:	ee16 2a90 	vmov	r2, s13
 80030ec:	dc1c      	bgt.n	8003128 <__ieee754_rem_pio2f+0x134>
 80030ee:	495a      	ldr	r1, [pc, #360]	; (8003258 <__ieee754_rem_pio2f+0x264>)
 80030f0:	1e47      	subs	r7, r0, #1
 80030f2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80030f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d014      	beq.n	8003128 <__ieee754_rem_pio2f+0x134>
 80030fe:	6022      	str	r2, [r4, #0]
 8003100:	ed94 7a00 	vldr	s14, [r4]
 8003104:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003108:	2e00      	cmp	r6, #0
 800310a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800310e:	ed84 0a01 	vstr	s0, [r4, #4]
 8003112:	da9c      	bge.n	800304e <__ieee754_rem_pio2f+0x5a>
 8003114:	eeb1 7a47 	vneg.f32	s14, s14
 8003118:	eeb1 0a40 	vneg.f32	s0, s0
 800311c:	ed84 7a00 	vstr	s14, [r4]
 8003120:	ed84 0a01 	vstr	s0, [r4, #4]
 8003124:	4240      	negs	r0, r0
 8003126:	e792      	b.n	800304e <__ieee754_rem_pio2f+0x5a>
 8003128:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800312c:	15eb      	asrs	r3, r5, #23
 800312e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003132:	2d08      	cmp	r5, #8
 8003134:	dde3      	ble.n	80030fe <__ieee754_rem_pio2f+0x10a>
 8003136:	eddf 7a44 	vldr	s15, [pc, #272]	; 8003248 <__ieee754_rem_pio2f+0x254>
 800313a:	eef0 6a40 	vmov.f32	s13, s0
 800313e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003142:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003146:	eea6 0a27 	vfma.f32	s0, s12, s15
 800314a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800324c <__ieee754_rem_pio2f+0x258>
 800314e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8003152:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003156:	eef0 7a40 	vmov.f32	s15, s0
 800315a:	ee15 2a90 	vmov	r2, s11
 800315e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003162:	1a5b      	subs	r3, r3, r1
 8003164:	2b19      	cmp	r3, #25
 8003166:	dc04      	bgt.n	8003172 <__ieee754_rem_pio2f+0x17e>
 8003168:	edc4 5a00 	vstr	s11, [r4]
 800316c:	eeb0 0a66 	vmov.f32	s0, s13
 8003170:	e7c6      	b.n	8003100 <__ieee754_rem_pio2f+0x10c>
 8003172:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800325c <__ieee754_rem_pio2f+0x268>
 8003176:	eeb0 0a66 	vmov.f32	s0, s13
 800317a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800317e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003182:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003260 <__ieee754_rem_pio2f+0x26c>
 8003186:	eee6 7a25 	vfma.f32	s15, s12, s11
 800318a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800318e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003192:	ed84 7a00 	vstr	s14, [r4]
 8003196:	e7b3      	b.n	8003100 <__ieee754_rem_pio2f+0x10c>
 8003198:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800319c:	db06      	blt.n	80031ac <__ieee754_rem_pio2f+0x1b8>
 800319e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80031a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80031a6:	edc0 7a00 	vstr	s15, [r0]
 80031aa:	e733      	b.n	8003014 <__ieee754_rem_pio2f+0x20>
 80031ac:	15ea      	asrs	r2, r5, #23
 80031ae:	3a86      	subs	r2, #134	; 0x86
 80031b0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003264 <__ieee754_rem_pio2f+0x270>
 80031c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031c8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80031cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031dc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80031e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	edcd 7a05 	vstr	s15, [sp, #20]
 80031f0:	d11e      	bne.n	8003230 <__ieee754_rem_pio2f+0x23c>
 80031f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	bf14      	ite	ne
 80031fc:	2302      	movne	r3, #2
 80031fe:	2301      	moveq	r3, #1
 8003200:	4919      	ldr	r1, [pc, #100]	; (8003268 <__ieee754_rem_pio2f+0x274>)
 8003202:	9101      	str	r1, [sp, #4]
 8003204:	2102      	movs	r1, #2
 8003206:	9100      	str	r1, [sp, #0]
 8003208:	a803      	add	r0, sp, #12
 800320a:	4621      	mov	r1, r4
 800320c:	f000 f88e 	bl	800332c <__kernel_rem_pio2f>
 8003210:	2e00      	cmp	r6, #0
 8003212:	f6bf af1c 	bge.w	800304e <__ieee754_rem_pio2f+0x5a>
 8003216:	edd4 7a00 	vldr	s15, [r4]
 800321a:	eef1 7a67 	vneg.f32	s15, s15
 800321e:	edc4 7a00 	vstr	s15, [r4]
 8003222:	edd4 7a01 	vldr	s15, [r4, #4]
 8003226:	eef1 7a67 	vneg.f32	s15, s15
 800322a:	edc4 7a01 	vstr	s15, [r4, #4]
 800322e:	e779      	b.n	8003124 <__ieee754_rem_pio2f+0x130>
 8003230:	2303      	movs	r3, #3
 8003232:	e7e5      	b.n	8003200 <__ieee754_rem_pio2f+0x20c>
 8003234:	3f490fd8 	.word	0x3f490fd8
 8003238:	4016cbe3 	.word	0x4016cbe3
 800323c:	3fc90f80 	.word	0x3fc90f80
 8003240:	3fc90fd0 	.word	0x3fc90fd0
 8003244:	37354443 	.word	0x37354443
 8003248:	37354400 	.word	0x37354400
 800324c:	2e85a308 	.word	0x2e85a308
 8003250:	43490f80 	.word	0x43490f80
 8003254:	3f22f984 	.word	0x3f22f984
 8003258:	08003a88 	.word	0x08003a88
 800325c:	2e85a300 	.word	0x2e85a300
 8003260:	248d3132 	.word	0x248d3132
 8003264:	43800000 	.word	0x43800000
 8003268:	08003b08 	.word	0x08003b08

0800326c <__kernel_cosf>:
 800326c:	ee10 3a10 	vmov	r3, s0
 8003270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003274:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003278:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800327c:	da05      	bge.n	800328a <__kernel_cosf+0x1e>
 800327e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	2a00      	cmp	r2, #0
 8003288:	d03d      	beq.n	8003306 <__kernel_cosf+0x9a>
 800328a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800328e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800330c <__kernel_cosf+0xa0>
 8003292:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003310 <__kernel_cosf+0xa4>
 8003296:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003314 <__kernel_cosf+0xa8>
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <__kernel_cosf+0xac>)
 800329c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80032a0:	4293      	cmp	r3, r2
 80032a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800331c <__kernel_cosf+0xb0>
 80032a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80032aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003320 <__kernel_cosf+0xb4>
 80032ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80032b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003324 <__kernel_cosf+0xb8>
 80032b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80032ba:	eeb0 7a66 	vmov.f32	s14, s13
 80032be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80032c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80032c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80032ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80032ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80032d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80032d6:	dc04      	bgt.n	80032e2 <__kernel_cosf+0x76>
 80032d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80032dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80032e0:	4770      	bx	lr
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <__kernel_cosf+0xbc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bfda      	itte	le
 80032e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80032ec:	ee06 3a90 	vmovle	s13, r3
 80032f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80032f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003304:	4770      	bx	lr
 8003306:	eeb0 0a46 	vmov.f32	s0, s12
 800330a:	4770      	bx	lr
 800330c:	ad47d74e 	.word	0xad47d74e
 8003310:	310f74f6 	.word	0x310f74f6
 8003314:	3d2aaaab 	.word	0x3d2aaaab
 8003318:	3e999999 	.word	0x3e999999
 800331c:	b493f27c 	.word	0xb493f27c
 8003320:	37d00d01 	.word	0x37d00d01
 8003324:	bab60b61 	.word	0xbab60b61
 8003328:	3f480000 	.word	0x3f480000

0800332c <__kernel_rem_pio2f>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	ed2d 8b04 	vpush	{d8-d9}
 8003334:	b0d7      	sub	sp, #348	; 0x15c
 8003336:	4616      	mov	r6, r2
 8003338:	4698      	mov	r8, r3
 800333a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800333c:	4bbb      	ldr	r3, [pc, #748]	; (800362c <__kernel_rem_pio2f+0x300>)
 800333e:	9001      	str	r0, [sp, #4]
 8003340:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8003344:	1d33      	adds	r3, r6, #4
 8003346:	460d      	mov	r5, r1
 8003348:	f108 39ff 	add.w	r9, r8, #4294967295
 800334c:	db29      	blt.n	80033a2 <__kernel_rem_pio2f+0x76>
 800334e:	1ef1      	subs	r1, r6, #3
 8003350:	bf48      	it	mi
 8003352:	1d31      	addmi	r1, r6, #4
 8003354:	10c9      	asrs	r1, r1, #3
 8003356:	1c4c      	adds	r4, r1, #1
 8003358:	00e3      	lsls	r3, r4, #3
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800335e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800363c <__kernel_rem_pio2f+0x310>
 8003362:	eba1 0009 	sub.w	r0, r1, r9
 8003366:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800336a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800336e:	eb07 0c09 	add.w	ip, r7, r9
 8003372:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8003376:	2300      	movs	r3, #0
 8003378:	4563      	cmp	r3, ip
 800337a:	dd14      	ble.n	80033a6 <__kernel_rem_pio2f+0x7a>
 800337c:	ab1a      	add	r3, sp, #104	; 0x68
 800337e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003382:	46cc      	mov	ip, r9
 8003384:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8003388:	f1c8 0b01 	rsb	fp, r8, #1
 800338c:	eb0b 020c 	add.w	r2, fp, ip
 8003390:	4297      	cmp	r7, r2
 8003392:	db27      	blt.n	80033e4 <__kernel_rem_pio2f+0xb8>
 8003394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003398:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800363c <__kernel_rem_pio2f+0x310>
 800339c:	4618      	mov	r0, r3
 800339e:	2200      	movs	r2, #0
 80033a0:	e016      	b.n	80033d0 <__kernel_rem_pio2f+0xa4>
 80033a2:	2100      	movs	r1, #0
 80033a4:	e7d7      	b.n	8003356 <__kernel_rem_pio2f+0x2a>
 80033a6:	42d8      	cmn	r0, r3
 80033a8:	bf5d      	ittte	pl
 80033aa:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80033ae:	ee07 2a90 	vmovpl	s15, r2
 80033b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80033b6:	eef0 7a47 	vmovmi.f32	s15, s14
 80033ba:	ecea 7a01 	vstmia	sl!, {s15}
 80033be:	3301      	adds	r3, #1
 80033c0:	e7da      	b.n	8003378 <__kernel_rem_pio2f+0x4c>
 80033c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80033c6:	ed90 7a00 	vldr	s14, [r0]
 80033ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80033ce:	3201      	adds	r2, #1
 80033d0:	454a      	cmp	r2, r9
 80033d2:	f1a0 0004 	sub.w	r0, r0, #4
 80033d6:	ddf4      	ble.n	80033c2 <__kernel_rem_pio2f+0x96>
 80033d8:	ecea 7a01 	vstmia	sl!, {s15}
 80033dc:	3304      	adds	r3, #4
 80033de:	f10c 0c01 	add.w	ip, ip, #1
 80033e2:	e7d3      	b.n	800338c <__kernel_rem_pio2f+0x60>
 80033e4:	ab06      	add	r3, sp, #24
 80033e6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80033ee:	eddf 8a92 	vldr	s17, [pc, #584]	; 8003638 <__kernel_rem_pio2f+0x30c>
 80033f2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8003634 <__kernel_rem_pio2f+0x308>
 80033f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	46ba      	mov	sl, r7
 80033fe:	ab56      	add	r3, sp, #344	; 0x158
 8003400:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003404:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003408:	ab06      	add	r3, sp, #24
 800340a:	4618      	mov	r0, r3
 800340c:	4652      	mov	r2, sl
 800340e:	2a00      	cmp	r2, #0
 8003410:	dc51      	bgt.n	80034b6 <__kernel_rem_pio2f+0x18a>
 8003412:	4620      	mov	r0, r4
 8003414:	9305      	str	r3, [sp, #20]
 8003416:	f000 faa5 	bl	8003964 <scalbnf>
 800341a:	eeb0 8a40 	vmov.f32	s16, s0
 800341e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003422:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003426:	f000 fa5b 	bl	80038e0 <floorf>
 800342a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800342e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003432:	2c00      	cmp	r4, #0
 8003434:	9b05      	ldr	r3, [sp, #20]
 8003436:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800343a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800343e:	edcd 7a00 	vstr	s15, [sp]
 8003442:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003446:	dd4b      	ble.n	80034e0 <__kernel_rem_pio2f+0x1b4>
 8003448:	f10a 3cff 	add.w	ip, sl, #4294967295
 800344c:	aa06      	add	r2, sp, #24
 800344e:	f1c4 0e08 	rsb	lr, r4, #8
 8003452:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003456:	ee17 1a90 	vmov	r1, s15
 800345a:	fa42 f00e 	asr.w	r0, r2, lr
 800345e:	4401      	add	r1, r0
 8003460:	9100      	str	r1, [sp, #0]
 8003462:	fa00 f00e 	lsl.w	r0, r0, lr
 8003466:	a906      	add	r1, sp, #24
 8003468:	1a12      	subs	r2, r2, r0
 800346a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800346e:	f1c4 0007 	rsb	r0, r4, #7
 8003472:	fa42 fb00 	asr.w	fp, r2, r0
 8003476:	f1bb 0f00 	cmp.w	fp, #0
 800347a:	dd43      	ble.n	8003504 <__kernel_rem_pio2f+0x1d8>
 800347c:	9a00      	ldr	r2, [sp, #0]
 800347e:	f04f 0e00 	mov.w	lr, #0
 8003482:	3201      	adds	r2, #1
 8003484:	9200      	str	r2, [sp, #0]
 8003486:	4670      	mov	r0, lr
 8003488:	45f2      	cmp	sl, lr
 800348a:	dc6c      	bgt.n	8003566 <__kernel_rem_pio2f+0x23a>
 800348c:	2c00      	cmp	r4, #0
 800348e:	dd04      	ble.n	800349a <__kernel_rem_pio2f+0x16e>
 8003490:	2c01      	cmp	r4, #1
 8003492:	d079      	beq.n	8003588 <__kernel_rem_pio2f+0x25c>
 8003494:	2c02      	cmp	r4, #2
 8003496:	f000 8082 	beq.w	800359e <__kernel_rem_pio2f+0x272>
 800349a:	f1bb 0f02 	cmp.w	fp, #2
 800349e:	d131      	bne.n	8003504 <__kernel_rem_pio2f+0x1d8>
 80034a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80034a8:	b360      	cbz	r0, 8003504 <__kernel_rem_pio2f+0x1d8>
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 fa5a 	bl	8003964 <scalbnf>
 80034b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80034b4:	e026      	b.n	8003504 <__kernel_rem_pio2f+0x1d8>
 80034b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80034ba:	3a01      	subs	r2, #1
 80034bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c0:	a942      	add	r1, sp, #264	; 0x108
 80034c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80034ca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80034ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80034d2:	eca0 0a01 	vstmia	r0!, {s0}
 80034d6:	ed9c 0a00 	vldr	s0, [ip]
 80034da:	ee37 0a80 	vadd.f32	s0, s15, s0
 80034de:	e796      	b.n	800340e <__kernel_rem_pio2f+0xe2>
 80034e0:	d107      	bne.n	80034f2 <__kernel_rem_pio2f+0x1c6>
 80034e2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80034e6:	a906      	add	r1, sp, #24
 80034e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034ec:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80034f0:	e7c1      	b.n	8003476 <__kernel_rem_pio2f+0x14a>
 80034f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80034f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	da2f      	bge.n	8003560 <__kernel_rem_pio2f+0x234>
 8003500:	f04f 0b00 	mov.w	fp, #0
 8003504:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	f040 8098 	bne.w	8003640 <__kernel_rem_pio2f+0x314>
 8003510:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003514:	469c      	mov	ip, r3
 8003516:	2200      	movs	r2, #0
 8003518:	45bc      	cmp	ip, r7
 800351a:	da48      	bge.n	80035ae <__kernel_rem_pio2f+0x282>
 800351c:	2a00      	cmp	r2, #0
 800351e:	d05f      	beq.n	80035e0 <__kernel_rem_pio2f+0x2b4>
 8003520:	aa06      	add	r2, sp, #24
 8003522:	3c08      	subs	r4, #8
 8003524:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003528:	2900      	cmp	r1, #0
 800352a:	d07d      	beq.n	8003628 <__kernel_rem_pio2f+0x2fc>
 800352c:	4620      	mov	r0, r4
 800352e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	f000 fa16 	bl	8003964 <scalbnf>
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003638 <__kernel_rem_pio2f+0x30c>
 800353e:	4619      	mov	r1, r3
 8003540:	2900      	cmp	r1, #0
 8003542:	f280 80af 	bge.w	80036a4 <__kernel_rem_pio2f+0x378>
 8003546:	4618      	mov	r0, r3
 8003548:	2400      	movs	r4, #0
 800354a:	2800      	cmp	r0, #0
 800354c:	f2c0 80d0 	blt.w	80036f0 <__kernel_rem_pio2f+0x3c4>
 8003550:	a942      	add	r1, sp, #264	; 0x108
 8003552:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8003556:	4a36      	ldr	r2, [pc, #216]	; (8003630 <__kernel_rem_pio2f+0x304>)
 8003558:	eddf 7a38 	vldr	s15, [pc, #224]	; 800363c <__kernel_rem_pio2f+0x310>
 800355c:	2100      	movs	r1, #0
 800355e:	e0bb      	b.n	80036d8 <__kernel_rem_pio2f+0x3ac>
 8003560:	f04f 0b02 	mov.w	fp, #2
 8003564:	e78a      	b.n	800347c <__kernel_rem_pio2f+0x150>
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	b948      	cbnz	r0, 800357e <__kernel_rem_pio2f+0x252>
 800356a:	b11a      	cbz	r2, 8003574 <__kernel_rem_pio2f+0x248>
 800356c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	f10e 0e01 	add.w	lr, lr, #1
 8003578:	3304      	adds	r3, #4
 800357a:	4610      	mov	r0, r2
 800357c:	e784      	b.n	8003488 <__kernel_rem_pio2f+0x15c>
 800357e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	4602      	mov	r2, r0
 8003586:	e7f5      	b.n	8003574 <__kernel_rem_pio2f+0x248>
 8003588:	f10a 3cff 	add.w	ip, sl, #4294967295
 800358c:	ab06      	add	r3, sp, #24
 800358e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	aa06      	add	r2, sp, #24
 8003598:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800359c:	e77d      	b.n	800349a <__kernel_rem_pio2f+0x16e>
 800359e:	f10a 3cff 	add.w	ip, sl, #4294967295
 80035a2:	ab06      	add	r3, sp, #24
 80035a4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	e7f3      	b.n	8003596 <__kernel_rem_pio2f+0x26a>
 80035ae:	a906      	add	r1, sp, #24
 80035b0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80035b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80035b8:	4302      	orrs	r2, r0
 80035ba:	e7ad      	b.n	8003518 <__kernel_rem_pio2f+0x1ec>
 80035bc:	3001      	adds	r0, #1
 80035be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d0fa      	beq.n	80035bc <__kernel_rem_pio2f+0x290>
 80035c6:	a91a      	add	r1, sp, #104	; 0x68
 80035c8:	eb0a 0208 	add.w	r2, sl, r8
 80035cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80035d0:	f10a 0301 	add.w	r3, sl, #1
 80035d4:	eb0a 0100 	add.w	r1, sl, r0
 80035d8:	4299      	cmp	r1, r3
 80035da:	da04      	bge.n	80035e6 <__kernel_rem_pio2f+0x2ba>
 80035dc:	468a      	mov	sl, r1
 80035de:	e70e      	b.n	80033fe <__kernel_rem_pio2f+0xd2>
 80035e0:	9b04      	ldr	r3, [sp, #16]
 80035e2:	2001      	movs	r0, #1
 80035e4:	e7eb      	b.n	80035be <__kernel_rem_pio2f+0x292>
 80035e6:	9803      	ldr	r0, [sp, #12]
 80035e8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80035ec:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80035f0:	9000      	str	r0, [sp, #0]
 80035f2:	ee07 0a90 	vmov	s15, r0
 80035f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fa:	2000      	movs	r0, #0
 80035fc:	ece2 7a01 	vstmia	r2!, {s15}
 8003600:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800363c <__kernel_rem_pio2f+0x310>
 8003604:	4696      	mov	lr, r2
 8003606:	4548      	cmp	r0, r9
 8003608:	dd06      	ble.n	8003618 <__kernel_rem_pio2f+0x2ec>
 800360a:	a842      	add	r0, sp, #264	; 0x108
 800360c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003610:	edc0 7a00 	vstr	s15, [r0]
 8003614:	3301      	adds	r3, #1
 8003616:	e7df      	b.n	80035d8 <__kernel_rem_pio2f+0x2ac>
 8003618:	ecfc 6a01 	vldmia	ip!, {s13}
 800361c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003620:	3001      	adds	r0, #1
 8003622:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003626:	e7ee      	b.n	8003606 <__kernel_rem_pio2f+0x2da>
 8003628:	3b01      	subs	r3, #1
 800362a:	e779      	b.n	8003520 <__kernel_rem_pio2f+0x1f4>
 800362c:	08003e4c 	.word	0x08003e4c
 8003630:	08003e20 	.word	0x08003e20
 8003634:	43800000 	.word	0x43800000
 8003638:	3b800000 	.word	0x3b800000
 800363c:	00000000 	.word	0x00000000
 8003640:	9b02      	ldr	r3, [sp, #8]
 8003642:	eeb0 0a48 	vmov.f32	s0, s16
 8003646:	1b98      	subs	r0, r3, r6
 8003648:	f000 f98c 	bl	8003964 <scalbnf>
 800364c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003634 <__kernel_rem_pio2f+0x308>
 8003650:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	db1b      	blt.n	8003692 <__kernel_rem_pio2f+0x366>
 800365a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003638 <__kernel_rem_pio2f+0x30c>
 800365e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003662:	aa06      	add	r2, sp, #24
 8003664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003668:	a906      	add	r1, sp, #24
 800366a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366e:	3408      	adds	r4, #8
 8003670:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003678:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800367c:	ee10 3a10 	vmov	r3, s0
 8003680:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8003684:	ee17 2a90 	vmov	r2, s15
 8003688:	f10a 0301 	add.w	r3, sl, #1
 800368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003690:	e74c      	b.n	800352c <__kernel_rem_pio2f+0x200>
 8003692:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003696:	aa06      	add	r2, sp, #24
 8003698:	ee10 3a10 	vmov	r3, s0
 800369c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80036a0:	4653      	mov	r3, sl
 80036a2:	e743      	b.n	800352c <__kernel_rem_pio2f+0x200>
 80036a4:	aa42      	add	r2, sp, #264	; 0x108
 80036a6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80036aa:	aa06      	add	r2, sp, #24
 80036ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80036b0:	9201      	str	r2, [sp, #4]
 80036b2:	ee07 2a90 	vmov	s15, r2
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	3901      	subs	r1, #1
 80036bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80036c0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80036c4:	edc0 7a00 	vstr	s15, [r0]
 80036c8:	e73a      	b.n	8003540 <__kernel_rem_pio2f+0x214>
 80036ca:	ecf2 6a01 	vldmia	r2!, {s13}
 80036ce:	ecb6 7a01 	vldmia	r6!, {s14}
 80036d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80036d6:	3101      	adds	r1, #1
 80036d8:	42b9      	cmp	r1, r7
 80036da:	dc01      	bgt.n	80036e0 <__kernel_rem_pio2f+0x3b4>
 80036dc:	428c      	cmp	r4, r1
 80036de:	daf4      	bge.n	80036ca <__kernel_rem_pio2f+0x39e>
 80036e0:	aa56      	add	r2, sp, #344	; 0x158
 80036e2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80036e6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80036ea:	3801      	subs	r0, #1
 80036ec:	3401      	adds	r4, #1
 80036ee:	e72c      	b.n	800354a <__kernel_rem_pio2f+0x21e>
 80036f0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80036f2:	2a02      	cmp	r2, #2
 80036f4:	dc0a      	bgt.n	800370c <__kernel_rem_pio2f+0x3e0>
 80036f6:	2a00      	cmp	r2, #0
 80036f8:	dc61      	bgt.n	80037be <__kernel_rem_pio2f+0x492>
 80036fa:	d03c      	beq.n	8003776 <__kernel_rem_pio2f+0x44a>
 80036fc:	9b00      	ldr	r3, [sp, #0]
 80036fe:	f003 0007 	and.w	r0, r3, #7
 8003702:	b057      	add	sp, #348	; 0x15c
 8003704:	ecbd 8b04 	vpop	{d8-d9}
 8003708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800370e:	2a03      	cmp	r2, #3
 8003710:	d1f4      	bne.n	80036fc <__kernel_rem_pio2f+0x3d0>
 8003712:	aa2e      	add	r2, sp, #184	; 0xb8
 8003714:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003718:	4608      	mov	r0, r1
 800371a:	461c      	mov	r4, r3
 800371c:	2c00      	cmp	r4, #0
 800371e:	f1a0 0004 	sub.w	r0, r0, #4
 8003722:	dc59      	bgt.n	80037d8 <__kernel_rem_pio2f+0x4ac>
 8003724:	4618      	mov	r0, r3
 8003726:	2801      	cmp	r0, #1
 8003728:	f1a1 0104 	sub.w	r1, r1, #4
 800372c:	dc64      	bgt.n	80037f8 <__kernel_rem_pio2f+0x4cc>
 800372e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800363c <__kernel_rem_pio2f+0x310>
 8003732:	2b01      	cmp	r3, #1
 8003734:	dc70      	bgt.n	8003818 <__kernel_rem_pio2f+0x4ec>
 8003736:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800373a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800373e:	f1bb 0f00 	cmp.w	fp, #0
 8003742:	d172      	bne.n	800382a <__kernel_rem_pio2f+0x4fe>
 8003744:	edc5 6a00 	vstr	s13, [r5]
 8003748:	ed85 7a01 	vstr	s14, [r5, #4]
 800374c:	edc5 7a02 	vstr	s15, [r5, #8]
 8003750:	e7d4      	b.n	80036fc <__kernel_rem_pio2f+0x3d0>
 8003752:	aa2e      	add	r2, sp, #184	; 0xb8
 8003754:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003758:	ed91 7a00 	vldr	s14, [r1]
 800375c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003760:	3b01      	subs	r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	daf5      	bge.n	8003752 <__kernel_rem_pio2f+0x426>
 8003766:	f1bb 0f00 	cmp.w	fp, #0
 800376a:	d001      	beq.n	8003770 <__kernel_rem_pio2f+0x444>
 800376c:	eef1 7a67 	vneg.f32	s15, s15
 8003770:	edc5 7a00 	vstr	s15, [r5]
 8003774:	e7c2      	b.n	80036fc <__kernel_rem_pio2f+0x3d0>
 8003776:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800363c <__kernel_rem_pio2f+0x310>
 800377a:	e7f2      	b.n	8003762 <__kernel_rem_pio2f+0x436>
 800377c:	aa2e      	add	r2, sp, #184	; 0xb8
 800377e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003782:	edd0 7a00 	vldr	s15, [r0]
 8003786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378a:	3901      	subs	r1, #1
 800378c:	2900      	cmp	r1, #0
 800378e:	daf5      	bge.n	800377c <__kernel_rem_pio2f+0x450>
 8003790:	f1bb 0f00 	cmp.w	fp, #0
 8003794:	d017      	beq.n	80037c6 <__kernel_rem_pio2f+0x49a>
 8003796:	eef1 7a47 	vneg.f32	s15, s14
 800379a:	edc5 7a00 	vstr	s15, [r5]
 800379e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80037a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037a6:	a82f      	add	r0, sp, #188	; 0xbc
 80037a8:	2101      	movs	r1, #1
 80037aa:	428b      	cmp	r3, r1
 80037ac:	da0e      	bge.n	80037cc <__kernel_rem_pio2f+0x4a0>
 80037ae:	f1bb 0f00 	cmp.w	fp, #0
 80037b2:	d001      	beq.n	80037b8 <__kernel_rem_pio2f+0x48c>
 80037b4:	eef1 7a67 	vneg.f32	s15, s15
 80037b8:	edc5 7a01 	vstr	s15, [r5, #4]
 80037bc:	e79e      	b.n	80036fc <__kernel_rem_pio2f+0x3d0>
 80037be:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800363c <__kernel_rem_pio2f+0x310>
 80037c2:	4619      	mov	r1, r3
 80037c4:	e7e2      	b.n	800378c <__kernel_rem_pio2f+0x460>
 80037c6:	eef0 7a47 	vmov.f32	s15, s14
 80037ca:	e7e6      	b.n	800379a <__kernel_rem_pio2f+0x46e>
 80037cc:	ecb0 7a01 	vldmia	r0!, {s14}
 80037d0:	3101      	adds	r1, #1
 80037d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037d6:	e7e8      	b.n	80037aa <__kernel_rem_pio2f+0x47e>
 80037d8:	edd0 7a00 	vldr	s15, [r0]
 80037dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80037e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80037e4:	3c01      	subs	r4, #1
 80037e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037ea:	ed80 7a00 	vstr	s14, [r0]
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80037f6:	e791      	b.n	800371c <__kernel_rem_pio2f+0x3f0>
 80037f8:	edd1 7a00 	vldr	s15, [r1]
 80037fc:	edd1 6a01 	vldr	s13, [r1, #4]
 8003800:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003804:	3801      	subs	r0, #1
 8003806:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800380a:	ed81 7a00 	vstr	s14, [r1]
 800380e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003812:	edc1 7a01 	vstr	s15, [r1, #4]
 8003816:	e786      	b.n	8003726 <__kernel_rem_pio2f+0x3fa>
 8003818:	aa2e      	add	r2, sp, #184	; 0xb8
 800381a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800381e:	ed91 7a00 	vldr	s14, [r1]
 8003822:	3b01      	subs	r3, #1
 8003824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003828:	e783      	b.n	8003732 <__kernel_rem_pio2f+0x406>
 800382a:	eef1 6a66 	vneg.f32	s13, s13
 800382e:	eeb1 7a47 	vneg.f32	s14, s14
 8003832:	edc5 6a00 	vstr	s13, [r5]
 8003836:	ed85 7a01 	vstr	s14, [r5, #4]
 800383a:	eef1 7a67 	vneg.f32	s15, s15
 800383e:	e785      	b.n	800374c <__kernel_rem_pio2f+0x420>

08003840 <__kernel_sinf>:
 8003840:	ee10 3a10 	vmov	r3, s0
 8003844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003848:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800384c:	da04      	bge.n	8003858 <__kernel_sinf+0x18>
 800384e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003852:	ee17 3a90 	vmov	r3, s15
 8003856:	b35b      	cbz	r3, 80038b0 <__kernel_sinf+0x70>
 8003858:	ee20 7a00 	vmul.f32	s14, s0, s0
 800385c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80038b4 <__kernel_sinf+0x74>
 8003860:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80038b8 <__kernel_sinf+0x78>
 8003864:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003868:	eddf 7a14 	vldr	s15, [pc, #80]	; 80038bc <__kernel_sinf+0x7c>
 800386c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003870:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80038c0 <__kernel_sinf+0x80>
 8003874:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003878:	eddf 7a12 	vldr	s15, [pc, #72]	; 80038c4 <__kernel_sinf+0x84>
 800387c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003880:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003884:	b930      	cbnz	r0, 8003894 <__kernel_sinf+0x54>
 8003886:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80038c8 <__kernel_sinf+0x88>
 800388a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800388e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003892:	4770      	bx	lr
 8003894:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003898:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800389c:	eee0 7a86 	vfma.f32	s15, s1, s12
 80038a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80038a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80038cc <__kernel_sinf+0x8c>
 80038a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80038ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2f2ec9d3 	.word	0x2f2ec9d3
 80038b8:	b2d72f34 	.word	0xb2d72f34
 80038bc:	3638ef1b 	.word	0x3638ef1b
 80038c0:	b9500d01 	.word	0xb9500d01
 80038c4:	3c088889 	.word	0x3c088889
 80038c8:	be2aaaab 	.word	0xbe2aaaab
 80038cc:	3e2aaaab 	.word	0x3e2aaaab

080038d0 <fabsf>:
 80038d0:	ee10 3a10 	vmov	r3, s0
 80038d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	ee00 3a10 	vmov	s0, r3
 80038dc:	4770      	bx	lr
	...

080038e0 <floorf>:
 80038e0:	ee10 3a10 	vmov	r3, s0
 80038e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80038e8:	3a7f      	subs	r2, #127	; 0x7f
 80038ea:	2a16      	cmp	r2, #22
 80038ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038f0:	dc2a      	bgt.n	8003948 <floorf+0x68>
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	da11      	bge.n	800391a <floorf+0x3a>
 80038f6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003958 <floorf+0x78>
 80038fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80038fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	dd05      	ble.n	8003914 <floorf+0x34>
 8003908:	2b00      	cmp	r3, #0
 800390a:	da23      	bge.n	8003954 <floorf+0x74>
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <floorf+0x7c>)
 800390e:	2900      	cmp	r1, #0
 8003910:	bf18      	it	ne
 8003912:	4613      	movne	r3, r2
 8003914:	ee00 3a10 	vmov	s0, r3
 8003918:	4770      	bx	lr
 800391a:	4911      	ldr	r1, [pc, #68]	; (8003960 <floorf+0x80>)
 800391c:	4111      	asrs	r1, r2
 800391e:	420b      	tst	r3, r1
 8003920:	d0fa      	beq.n	8003918 <floorf+0x38>
 8003922:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003958 <floorf+0x78>
 8003926:	ee30 0a27 	vadd.f32	s0, s0, s15
 800392a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	ddef      	ble.n	8003914 <floorf+0x34>
 8003934:	2b00      	cmp	r3, #0
 8003936:	bfbe      	ittt	lt
 8003938:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800393c:	fa40 f202 	asrlt.w	r2, r0, r2
 8003940:	189b      	addlt	r3, r3, r2
 8003942:	ea23 0301 	bic.w	r3, r3, r1
 8003946:	e7e5      	b.n	8003914 <floorf+0x34>
 8003948:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800394c:	d3e4      	bcc.n	8003918 <floorf+0x38>
 800394e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003952:	4770      	bx	lr
 8003954:	2300      	movs	r3, #0
 8003956:	e7dd      	b.n	8003914 <floorf+0x34>
 8003958:	7149f2ca 	.word	0x7149f2ca
 800395c:	bf800000 	.word	0xbf800000
 8003960:	007fffff 	.word	0x007fffff

08003964 <scalbnf>:
 8003964:	ee10 3a10 	vmov	r3, s0
 8003968:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800396c:	d025      	beq.n	80039ba <scalbnf+0x56>
 800396e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003972:	d302      	bcc.n	800397a <scalbnf+0x16>
 8003974:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003978:	4770      	bx	lr
 800397a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800397e:	d122      	bne.n	80039c6 <scalbnf+0x62>
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <scalbnf+0xc8>)
 8003982:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003a30 <scalbnf+0xcc>
 8003986:	4298      	cmp	r0, r3
 8003988:	ee20 0a27 	vmul.f32	s0, s0, s15
 800398c:	db16      	blt.n	80039bc <scalbnf+0x58>
 800398e:	ee10 3a10 	vmov	r3, s0
 8003992:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003996:	3a19      	subs	r2, #25
 8003998:	4402      	add	r2, r0
 800399a:	2afe      	cmp	r2, #254	; 0xfe
 800399c:	dd15      	ble.n	80039ca <scalbnf+0x66>
 800399e:	ee10 3a10 	vmov	r3, s0
 80039a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003a34 <scalbnf+0xd0>
 80039a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003a38 <scalbnf+0xd4>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	eeb0 7a67 	vmov.f32	s14, s15
 80039b0:	bfb8      	it	lt
 80039b2:	eef0 7a66 	vmovlt.f32	s15, s13
 80039b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80039ba:	4770      	bx	lr
 80039bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003a3c <scalbnf+0xd8>
 80039c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80039c4:	4770      	bx	lr
 80039c6:	0dd2      	lsrs	r2, r2, #23
 80039c8:	e7e6      	b.n	8003998 <scalbnf+0x34>
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	dd06      	ble.n	80039dc <scalbnf+0x78>
 80039ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80039d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80039d6:	ee00 3a10 	vmov	s0, r3
 80039da:	4770      	bx	lr
 80039dc:	f112 0f16 	cmn.w	r2, #22
 80039e0:	da1a      	bge.n	8003a18 <scalbnf+0xb4>
 80039e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80039e6:	4298      	cmp	r0, r3
 80039e8:	ee10 3a10 	vmov	r3, s0
 80039ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039f0:	dd0a      	ble.n	8003a08 <scalbnf+0xa4>
 80039f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003a34 <scalbnf+0xd0>
 80039f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a38 <scalbnf+0xd4>
 80039fa:	eef0 7a40 	vmov.f32	s15, s0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf18      	it	ne
 8003a02:	eeb0 0a47 	vmovne.f32	s0, s14
 8003a06:	e7db      	b.n	80039c0 <scalbnf+0x5c>
 8003a08:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003a3c <scalbnf+0xd8>
 8003a0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003a40 <scalbnf+0xdc>
 8003a10:	eef0 7a40 	vmov.f32	s15, s0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	e7f3      	b.n	8003a00 <scalbnf+0x9c>
 8003a18:	3219      	adds	r2, #25
 8003a1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a1e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003a22:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003a44 <scalbnf+0xe0>
 8003a26:	ee07 3a10 	vmov	s14, r3
 8003a2a:	e7c4      	b.n	80039b6 <scalbnf+0x52>
 8003a2c:	ffff3cb0 	.word	0xffff3cb0
 8003a30:	4c000000 	.word	0x4c000000
 8003a34:	7149f2ca 	.word	0x7149f2ca
 8003a38:	f149f2ca 	.word	0xf149f2ca
 8003a3c:	0da24260 	.word	0x0da24260
 8003a40:	8da24260 	.word	0x8da24260
 8003a44:	33000000 	.word	0x33000000

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
