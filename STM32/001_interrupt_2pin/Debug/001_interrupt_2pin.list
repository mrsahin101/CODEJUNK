
001_interrupt_2pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001648  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e0  080017e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017e8  080017e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f7c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ed8  00000000  00000000  00023fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  00024e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000380  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed2f  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000049ed  00000000  00000000  00044347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbd39  00000000  00000000  00048d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00104a6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e78  00000000  00000000  00104ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017b8 	.word	0x080017b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080017b8 	.word	0x080017b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <EXTI0_IRQHandler>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void EXTI0_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fccb 	bl	8000e60 <HAL_GPIO_EXTI_IRQHandler>

}void EXTI1_IRQHandler(void)
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <EXTI1_IRQHandler>:
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80004d2:	2002      	movs	r0, #2
 80004d4:	f000 fcc4 	bl	8000e60 <HAL_GPIO_EXTI_IRQHandler>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d106      	bne.n	80004fa <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <HAL_GPIO_EXTI_Callback+0x38>)
 80004f4:	f000 fc9a 	bl	8000e2c <HAL_GPIO_WritePin>

	else if(GPIO_Pin == GPIO_PIN_1)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
}
 80004f8:	e008      	b.n	800050c <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == GPIO_PIN_1)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d105      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <HAL_GPIO_EXTI_Callback+0x38>)
 8000508:	f000 fc90 	bl	8000e2c <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020c00 	.word	0x40020c00

08000518 <main>:

int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_Init();
 800051e:	f000 f965 	bl	80007ec <HAL_Init>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <main+0x90>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <main+0x90>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <main+0x90>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <main+0x90>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <main+0x90>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <main+0x90>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
	/*Configure GPIO pin : PA0 and PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800055a:	2303      	movs	r3, #3
 800055c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000562:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <main+0x94>)
 8000570:	f000 fac0 	bl	8000af4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD12 - Green LED */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000578:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x98>)
 800058e:	f000 fab1 	bl	8000af4 <HAL_GPIO_Init>

	/*Enabling EXTI0 and EXTI1 lines*/
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000592:	2006      	movs	r0, #6
 8000594:	f000 fa93 	bl	8000abe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000598:	2007      	movs	r0, #7
 800059a:	f000 fa90 	bl	8000abe <HAL_NVIC_EnableIRQ>

  SystemClock_Config();
 800059e:	f000 f809 	bl	80005b4 <SystemClock_Config>

  MX_GPIO_Init();
 80005a2:	f000 f873 	bl	800068c <MX_GPIO_Init>

  while (1);
 80005a6:	e7fe      	b.n	80005a6 <main+0x8e>
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <SystemClock_Config>:

}

void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f8f0 	bl	80017a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a28      	ldr	r2, [pc, #160]	; (8000684 <SystemClock_Config+0xd0>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xd4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <SystemClock_Config+0xd4>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	; 0xa8
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fc29 	bl	8000e90 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f83c 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fe8a 	bl	8001380 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f825 	bl	80006c0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000676:	f000 ff69 	bl	800154c <HAL_RCC_EnableCSS>
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_GPIO_Init+0x30>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_GPIO_Init+0x30>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_GPIO_Init+0x30>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <Error_Handler>:

void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <HAL_MspInit+0x4c>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x4c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f000 f9b0 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000720:	f001 f802 	bl	8001728 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x8>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f890 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b4:	4c0b      	ldr	r4, [pc, #44]	; (80007e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007c2:	f7ff ffd7 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c6:	f000 ffcb 	bl	8001760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ca:	f7ff fea5 	bl	8000518 <main>
  bx  lr    
 80007ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	080017f0 	.word	0x080017f0
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	2000002c 	.word	0x2000002c

080007e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <HAL_Init+0x40>)
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_Init+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_Init+0x40>)
 8000802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_Init+0x40>)
 800080e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f92b 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff ff54 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023c00 	.word	0x40023c00

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f943 	bl	8000ada <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 f90b 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000028 	.word	0x20000028

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000028 	.word	0x20000028

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff8e 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff29 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff3e 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff8e 	bl	80009c4 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5d 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e16b      	b.n	8000de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f040 815a 	bne.w	8000de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d130      	bne.n	8000ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d017      	beq.n	8000be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d123      	bne.n	8000c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0203 	and.w	r2, r3, #3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80b4 	beq.w	8000de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c96:	4a5b      	ldr	r2, [pc, #364]	; (8000e04 <HAL_GPIO_Init+0x310>)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_GPIO_Init+0x314>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d02b      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x318>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d025      	beq.n	8000d16 <HAL_GPIO_Init+0x222>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x31c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d01f      	beq.n	8000d12 <HAL_GPIO_Init+0x21e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <HAL_GPIO_Init+0x320>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d019      	beq.n	8000d0e <HAL_GPIO_Init+0x21a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4e      	ldr	r2, [pc, #312]	; (8000e18 <HAL_GPIO_Init+0x324>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0x216>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	; (8000e1c <HAL_GPIO_Init+0x328>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00d      	beq.n	8000d06 <HAL_GPIO_Init+0x212>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d007      	beq.n	8000d02 <HAL_GPIO_Init+0x20e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4b      	ldr	r2, [pc, #300]	; (8000e24 <HAL_GPIO_Init+0x330>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_GPIO_Init+0x20a>
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	e00e      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000cfe:	2308      	movs	r3, #8
 8000d00:	e00c      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d02:	2306      	movs	r3, #6
 8000d04:	e00a      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d06:	2305      	movs	r3, #5
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2c:	4935      	ldr	r1, [pc, #212]	; (8000e04 <HAL_GPIO_Init+0x310>)
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	f67f ae90 	bls.w	8000b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40021c00 	.word	0x40021c00
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	619a      	str	r2, [r3, #24]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb2c 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e264      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d075      	beq.n	8000f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eae:	4ba3      	ldr	r3, [pc, #652]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d00c      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eba:	4ba0      	ldr	r3, [pc, #640]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d112      	bne.n	8000eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec6:	4b9d      	ldr	r3, [pc, #628]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ed2:	d10b      	bne.n	8000eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	4b99      	ldr	r3, [pc, #612]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d05b      	beq.n	8000f98 <HAL_RCC_OscConfig+0x108>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d157      	bne.n	8000f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e23f      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x74>
 8000ef6:	4b91      	ldr	r3, [pc, #580]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a90      	ldr	r2, [pc, #576]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e01d      	b.n	8000f40 <HAL_RCC_OscConfig+0xb0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x98>
 8000f0e:	4b8b      	ldr	r3, [pc, #556]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a8a      	ldr	r2, [pc, #552]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b88      	ldr	r3, [pc, #544]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a87      	ldr	r2, [pc, #540]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e00b      	b.n	8000f40 <HAL_RCC_OscConfig+0xb0>
 8000f28:	4b84      	ldr	r3, [pc, #528]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a83      	ldr	r2, [pc, #524]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b81      	ldr	r3, [pc, #516]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a80      	ldr	r2, [pc, #512]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fcb6 	bl	80008b8 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fcb2 	bl	80008b8 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e204      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f6e:	e014      	b.n	8000f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fca2 	bl	80008b8 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fc9e 	bl	80008b8 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1f0      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	4b6c      	ldr	r3, [pc, #432]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0xe8>
 8000f96:	e000      	b.n	8000f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d063      	beq.n	800106e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb2:	4b62      	ldr	r3, [pc, #392]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d11c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d116      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x152>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d001      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e1c4      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4952      	ldr	r1, [pc, #328]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	e03a      	b.n	800106e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001000:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fc57 	bl	80008b8 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc53 	bl	80008b8 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1a5      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	4b46      	ldr	r3, [pc, #280]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b43      	ldr	r3, [pc, #268]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4940      	ldr	r1, [pc, #256]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
 8001040:	e015      	b.n	800106e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x2b0>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fc36 	bl	80008b8 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fc32 	bl	80008b8 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e184      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d030      	beq.n	80010dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d016      	beq.n	80010b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_RCC_OscConfig+0x2b4>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001088:	f7ff fc16 	bl	80008b8 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fc12 	bl	80008b8 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e164      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x200>
 80010ae:	e015      	b.n	80010dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_RCC_OscConfig+0x2b4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fbff 	bl	80008b8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fbfb 	bl	80008b8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e14d      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a0 	beq.w	800122a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10f      	bne.n	800111a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_RCC_OscConfig+0x2ac>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_RCC_OscConfig+0x2b8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	2b00      	cmp	r3, #0
 8001124:	d121      	bne.n	800116a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_RCC_OscConfig+0x2b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_RCC_OscConfig+0x2b8>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001132:	f7ff fbc1 	bl	80008b8 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	e011      	b.n	800115e <HAL_RCC_OscConfig+0x2ce>
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	42470000 	.word	0x42470000
 8001144:	42470e80 	.word	0x42470e80
 8001148:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114c:	f7ff fbb4 	bl	80008b8 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e106      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b85      	ldr	r3, [pc, #532]	; (8001374 <HAL_RCC_OscConfig+0x4e4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x2f0>
 8001172:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	4a80      	ldr	r2, [pc, #512]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6713      	str	r3, [r2, #112]	; 0x70
 800117e:	e01c      	b.n	80011ba <HAL_RCC_OscConfig+0x32a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x312>
 8001188:	4b7b      	ldr	r3, [pc, #492]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800118a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118c:	4a7a      	ldr	r2, [pc, #488]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6713      	str	r3, [r2, #112]	; 0x70
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001198:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6713      	str	r3, [r2, #112]	; 0x70
 80011a0:	e00b      	b.n	80011ba <HAL_RCC_OscConfig+0x32a>
 80011a2:	4b75      	ldr	r3, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a74      	ldr	r2, [pc, #464]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
 80011ae:	4b72      	ldr	r3, [pc, #456]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b2:	4a71      	ldr	r2, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d015      	beq.n	80011ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb79 	bl	80008b8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fb75 	bl	80008b8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e0c5      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	4b65      	ldr	r3, [pc, #404]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ee      	beq.n	80011ca <HAL_RCC_OscConfig+0x33a>
 80011ec:	e014      	b.n	8001218 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb63 	bl	80008b8 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fb5f 	bl	80008b8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0af      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1ee      	bne.n	80011f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d105      	bne.n	800122a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121e:	4b56      	ldr	r3, [pc, #344]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a55      	ldr	r2, [pc, #340]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 809b 	beq.w	800136a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d05c      	beq.n	80012fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d141      	bne.n	80012cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x4ec>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fb33 	bl	80008b8 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff fb2f 	bl	80008b8 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e081      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	019b      	lsls	r3, r3, #6
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	3b01      	subs	r3, #1
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_RCC_OscConfig+0x4ec>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb08 	bl	80008b8 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7ff fb04 	bl	80008b8 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e056      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x41c>
 80012ca:	e04e      	b.n	800136a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_OscConfig+0x4ec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff faf1 	bl	80008b8 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff faed 	bl	80008b8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e03f      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x44a>
 80012f8:	e037      	b.n	800136a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e032      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_RCC_OscConfig+0x4e8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d028      	beq.n	8001366 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d121      	bne.n	8001366 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132c:	429a      	cmp	r2, r3
 800132e:	d11a      	bne.n	8001366 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001336:	4013      	ands	r3, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800133c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800133e:	4293      	cmp	r3, r2
 8001340:	d111      	bne.n	8001366 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	3b01      	subs	r3, #1
 8001350:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001352:	429a      	cmp	r2, r3
 8001354:	d107      	bne.n	8001366 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40007000 	.word	0x40007000
 8001378:	40023800 	.word	0x40023800
 800137c:	42470060 	.word	0x42470060

08001380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0cc      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d90c      	bls.n	80013bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d044      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d119      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d003      	beq.n	800143e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143a:	2b03      	cmp	r3, #3
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e067      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4934      	ldr	r1, [pc, #208]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fa22 	bl	80008b8 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff fa1e 	bl	80008b8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e04f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d20c      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f82d 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f982 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	40023800 	.word	0x40023800
 8001540:	080017d0 	.word	0x080017d0
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_EnableCSS+0x14>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	4247004c 	.word	0x4247004c

08001564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	2300      	movs	r3, #0
 8001576:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d00d      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001588:	2b08      	cmp	r3, #8
 800158a:	f200 80bd 	bhi.w	8001708 <HAL_RCC_GetSysClockFreq+0x1a4>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x34>
 8001592:	2b04      	cmp	r3, #4
 8001594:	d003      	beq.n	800159e <HAL_RCC_GetSysClockFreq+0x3a>
 8001596:	e0b7      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800159a:	60bb      	str	r3, [r7, #8]
       break;
 800159c:	e0b7      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800159e:	4b61      	ldr	r3, [pc, #388]	; (8001724 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80015a0:	60bb      	str	r3, [r7, #8]
      break;
 80015a2:	e0b4      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ae:	4b5b      	ldr	r3, [pc, #364]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d04d      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ba:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	099b      	lsrs	r3, r3, #6
 80015c0:	461a      	mov	r2, r3
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	ea02 0800 	and.w	r8, r2, r0
 80015d2:	ea03 0901 	and.w	r9, r3, r1
 80015d6:	4640      	mov	r0, r8
 80015d8:	4649      	mov	r1, r9
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	014b      	lsls	r3, r1, #5
 80015e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015e8:	0142      	lsls	r2, r0, #5
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	ebb0 0008 	subs.w	r0, r0, r8
 80015f2:	eb61 0109 	sbc.w	r1, r1, r9
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	018b      	lsls	r3, r1, #6
 8001600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001604:	0182      	lsls	r2, r0, #6
 8001606:	1a12      	subs	r2, r2, r0
 8001608:	eb63 0301 	sbc.w	r3, r3, r1
 800160c:	f04f 0000 	mov.w	r0, #0
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	00d9      	lsls	r1, r3, #3
 8001616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800161a:	00d0      	lsls	r0, r2, #3
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	eb12 0208 	adds.w	r2, r2, r8
 8001624:	eb43 0309 	adc.w	r3, r3, r9
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0259      	lsls	r1, r3, #9
 8001632:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001636:	0250      	lsls	r0, r2, #9
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f7fe fdbe 	bl	80001c8 <__aeabi_uldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e04a      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	461a      	mov	r2, r3
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	ea02 0400 	and.w	r4, r2, r0
 800166e:	ea03 0501 	and.w	r5, r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	014b      	lsls	r3, r1, #5
 8001680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001684:	0142      	lsls	r2, r0, #5
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	1b00      	subs	r0, r0, r4
 800168c:	eb61 0105 	sbc.w	r1, r1, r5
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	018b      	lsls	r3, r1, #6
 800169a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800169e:	0182      	lsls	r2, r0, #6
 80016a0:	1a12      	subs	r2, r2, r0
 80016a2:	eb63 0301 	sbc.w	r3, r3, r1
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	00d9      	lsls	r1, r3, #3
 80016b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016b4:	00d0      	lsls	r0, r2, #3
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	1912      	adds	r2, r2, r4
 80016bc:	eb45 0303 	adc.w	r3, r5, r3
 80016c0:	f04f 0000 	mov.w	r0, #0
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	0299      	lsls	r1, r3, #10
 80016ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016ce:	0290      	lsls	r0, r2, #10
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f7fe fd72 	bl	80001c8 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4613      	mov	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	60bb      	str	r3, [r7, #8]
      break;
 8001706:	e002      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800170a:	60bb      	str	r3, [r7, #8]
      break;
 800170c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170e:	68bb      	ldr	r3, [r7, #8]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	00f42400 	.word	0x00f42400
 8001724:	007a1200 	.word	0x007a1200

08001728 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_NMI_IRQHandler+0x20>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d104      	bne.n	8001742 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001738:	f000 f80a 	bl	8001750 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_RCC_NMI_IRQHandler+0x24>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	701a      	strb	r2, [r3, #0]
  }
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	4002380e 	.word	0x4002380e

08001750 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <__libc_init_array>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	4d0d      	ldr	r5, [pc, #52]	; (8001798 <__libc_init_array+0x38>)
 8001764:	4c0d      	ldr	r4, [pc, #52]	; (800179c <__libc_init_array+0x3c>)
 8001766:	1b64      	subs	r4, r4, r5
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	2600      	movs	r6, #0
 800176c:	42a6      	cmp	r6, r4
 800176e:	d109      	bne.n	8001784 <__libc_init_array+0x24>
 8001770:	4d0b      	ldr	r5, [pc, #44]	; (80017a0 <__libc_init_array+0x40>)
 8001772:	4c0c      	ldr	r4, [pc, #48]	; (80017a4 <__libc_init_array+0x44>)
 8001774:	f000 f820 	bl	80017b8 <_init>
 8001778:	1b64      	subs	r4, r4, r5
 800177a:	10a4      	asrs	r4, r4, #2
 800177c:	2600      	movs	r6, #0
 800177e:	42a6      	cmp	r6, r4
 8001780:	d105      	bne.n	800178e <__libc_init_array+0x2e>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	f855 3b04 	ldr.w	r3, [r5], #4
 8001788:	4798      	blx	r3
 800178a:	3601      	adds	r6, #1
 800178c:	e7ee      	b.n	800176c <__libc_init_array+0xc>
 800178e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001792:	4798      	blx	r3
 8001794:	3601      	adds	r6, #1
 8001796:	e7f2      	b.n	800177e <__libc_init_array+0x1e>
 8001798:	080017e8 	.word	0x080017e8
 800179c:	080017e8 	.word	0x080017e8
 80017a0:	080017e8 	.word	0x080017e8
 80017a4:	080017ec 	.word	0x080017ec

080017a8 <memset>:
 80017a8:	4402      	add	r2, r0
 80017aa:	4603      	mov	r3, r0
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d100      	bne.n	80017b2 <memset+0xa>
 80017b0:	4770      	bx	lr
 80017b2:	f803 1b01 	strb.w	r1, [r3], #1
 80017b6:	e7f9      	b.n	80017ac <memset+0x4>

080017b8 <_init>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr

080017c4 <_fini>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr
