
007_CAN_BUS_BLINKY_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002644  08002644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800264c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f73  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012d1  00000000  00000000  00025faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b8  00000000  00000000  000277d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f356  00000000  00000000  00027c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c66  00000000  00000000  00046fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be708  00000000  00000000  0004cc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010b34c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001460  00000000  00000000  0010b3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002614 	.word	0x08002614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002614 	.word	0x08002614

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_CAN_RxFifo1MsgPendingCallback>:

int datacheck = 0;


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 fdeb 	bl	80010aa <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80004d6:	691b      	ldr	r3, [r3, #16]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d102      	bne.n	80004e2 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	}
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000038 	.word	0x20000038
 80004f0:	20000080 	.word	0x20000080
 80004f4:	20000028 	.word	0x20000028

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fa43 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f851 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f90d 	bl	8000724 <MX_GPIO_Init>
  MX_CAN1_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800050e:	481f      	ldr	r0, [pc, #124]	; (800058c <main+0x94>)
 8000510:	f000 fcac 	bl	8000e6c <HAL_CAN_Start>


  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000514:	2110      	movs	r1, #16
 8000516:	481d      	ldr	r0, [pc, #116]	; (800058c <main+0x94>)
 8000518:	f000 fed9 	bl	80012ce <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 2;  // data length
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <main+0x98>)
 800051e:	2202      	movs	r2, #2
 8000520:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <main+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <main+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // ID
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <main+0x98>)
 8000530:	f240 1203 	movw	r2, #259	; 0x103
 8000534:	601a      	str	r2, [r3, #0]


  TxData[0] = 200;  // ms delay
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <main+0x9c>)
 8000538:	22c8      	movs	r2, #200	; 0xc8
 800053a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 20;  // loop rep
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <main+0x9c>)
 800053e:	2214      	movs	r2, #20
 8000540:	705a      	strb	r2, [r3, #1]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay (1000);

	  if (datacheck)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <main+0xa0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0fb      	beq.n	8000542 <main+0x4a>
	  {
		  // blink the LED
		  for (int i=0; i<RxData[1]; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	e00c      	b.n	800056a <main+0x72>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <main+0xa4>)
 8000556:	f001 fbd6 	bl	8001d06 <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <main+0xa8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fa84 	bl	8000a6c <HAL_Delay>
		  for (int i=0; i<RxData[1]; i++)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0xa8>)
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4293      	cmp	r3, r2
 8000574:	dbec      	blt.n	8000550 <main+0x58>
		  }

		  datacheck = 0;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <main+0xa0>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]

		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <main+0xac>)
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <main+0x9c>)
 8000580:	4903      	ldr	r1, [pc, #12]	; (8000590 <main+0x98>)
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <main+0x94>)
 8000584:	f000 fcb6 	bl	8000ef4 <HAL_CAN_AddTxMessage>
	  if (datacheck)
 8000588:	e7db      	b.n	8000542 <main+0x4a>
 800058a:	bf00      	nop
 800058c:	20000040 	.word	0x20000040
 8000590:	20000068 	.word	0x20000068
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000028 	.word	0x20000028
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	20000038 	.word	0x20000038
 80005a4:	20000034 	.word	0x20000034

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f824 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	; 0xa8
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fb85 	bl	8001d3c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f8b8 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fde6 	bl	800222c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f8a1 	bl	80007ac <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_CAN1_Init+0xa0>)
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <MX_CAN1_Init+0xa4>)
 8000686:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <MX_CAN1_Init+0xa0>)
 800068a:	2204      	movs	r2, #4
 800068c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_CAN1_Init+0xa0>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_CAN1_Init+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_CAN1_Init+0xa0>)
 800069c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80006a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_CAN1_Init+0xa0>)
 80006a4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80006a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_CAN1_Init+0xa0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_CAN1_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_CAN1_Init+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_CAN1_Init+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_CAN1_Init+0xa0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_CAN1_Init+0xa0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_CAN1_Init+0xa0>)
 80006d0:	f000 f9f0 	bl	8000ab4 <HAL_CAN_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006da:	f000 f867 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80006e2:	230a      	movs	r3, #10
 80006e4:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x446<<5;
 80006ea:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80006ee:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 80006f4:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80006f8:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000702:	2301      	movs	r3, #1
 8000704:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_CAN1_Init+0xa0>)
 8000710:	f000 facc 	bl	8000cac <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000040 	.word	0x20000040
 8000720:	40006400 	.word	0x40006400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0x80>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x80>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0x80>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_GPIO_Init+0x80>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x80>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x84>)
 800077a:	f001 faab 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0x84>)
 8000798:	f001 f900 	bl	800199c <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020c00 	.word	0x40020c00

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f001 f88e 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_CAN_MspInit+0x94>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d133      	bne.n	8000892 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 8000834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_CAN_MspInit+0x98>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000862:	2303      	movs	r3, #3
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000872:	2309      	movs	r3, #9
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <HAL_CAN_MspInit+0x9c>)
 800087e:	f001 f88d 	bl	800199c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2015      	movs	r0, #21
 8000888:	f001 f851 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800088c:	2015      	movs	r0, #21
 800088e:	f001 f86a 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40006400 	.word	0x40006400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020c00 	.word	0x40020c00

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f89a 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <CAN1_RX1_IRQHandler+0x10>)
 8000902:	f000 fd0a 	bl	800131a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000040 	.word	0x20000040

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f001 fe2b 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fdc7 	bl	80004f8 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	200000a0 	.word	0x200000a0

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 ffb1 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fefc 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 ffc9 	bl	8001982 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 ff91 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	2000009c 	.word	0x2000009c

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000009c 	.word	0x2000009c

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e0ed      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fe98 	bl	8000808 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0201 	orr.w	r2, r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae8:	f7ff ffb4 	bl	8000a54 <HAL_GetTick>
 8000aec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aee:	e012      	b.n	8000b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af0:	f7ff ffb0 	bl	8000a54 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d90b      	bls.n	8000b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e0c5      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0e5      	beq.n	8000af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 0202 	bic.w	r2, r2, #2
 8000b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b34:	f7ff ff8e 	bl	8000a54 <HAL_GetTick>
 8000b38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b3a:	e012      	b.n	8000b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b3c:	f7ff ff8a 	bl	8000a54 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	d90b      	bls.n	8000b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e09f      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1e5      	bne.n	8000b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e007      	b.n	8000b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7e5b      	ldrb	r3, [r3, #25]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d108      	bne.n	8000bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e9b      	ldrb	r3, [r3, #26]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0220 	bic.w	r2, r2, #32
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7edb      	ldrb	r3, [r3, #27]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0210 	bic.w	r2, r2, #16
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0210 	orr.w	r2, r2, #16
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f1b      	ldrb	r3, [r3, #28]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0208 	orr.w	r2, r2, #8
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0208 	bic.w	r2, r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7f5b      	ldrb	r3, [r3, #29]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0204 	orr.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	ea42 0103 	orr.w	r1, r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d003      	beq.n	8000cd2 <HAL_CAN_ConfigFilter+0x26>
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	f040 80be 	bne.w	8000e4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000cd2:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <HAL_CAN_ConfigFilter+0x1bc>)
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	431a      	orrs	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	2201      	movs	r2, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d123      	bne.n	8000d7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3248      	adds	r2, #72	; 0x48
 8000d5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d72:	6979      	ldr	r1, [r7, #20]
 8000d74:	3348      	adds	r3, #72	; 0x48
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d122      	bne.n	8000dca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000da4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3248      	adds	r2, #72	; 0x48
 8000daa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc0:	6979      	ldr	r1, [r7, #20]
 8000dc2:	3348      	adds	r3, #72	; 0x48
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000de4:	e007      	b.n	8000df6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e10:	e007      	b.n	8000e22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d107      	bne.n	8000e3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e40:	f023 0201 	bic.w	r2, r3, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e006      	b.n	8000e5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
  }
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	40006400 	.word	0x40006400

08000e6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d12e      	bne.n	8000ede <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2202      	movs	r2, #2
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e98:	f7ff fddc 	bl	8000a54 <HAL_GetTick>
 8000e9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e9e:	e012      	b.n	8000ec6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea0:	f7ff fdd8 	bl	8000a54 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d90b      	bls.n	8000ec6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e012      	b.n	8000eec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e5      	bne.n	8000ea0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e006      	b.n	8000eec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f12:	7ffb      	ldrb	r3, [r7, #31]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d003      	beq.n	8000f20 <HAL_CAN_AddTxMessage+0x2c>
 8000f18:	7ffb      	ldrb	r3, [r7, #31]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	f040 80b8 	bne.w	8001090 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10a      	bne.n	8000f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80a0 	beq.w	8001080 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	0e1b      	lsrs	r3, r3, #24
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d907      	bls.n	8000f60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e09e      	b.n	800109e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f60:	2201      	movs	r2, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	409a      	lsls	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f7c:	68f9      	ldr	r1, [r7, #12]
 8000f7e:	6809      	ldr	r1, [r1, #0]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3318      	adds	r3, #24
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	440b      	add	r3, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e00f      	b.n	8000fae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f9e:	68f9      	ldr	r1, [r7, #12]
 8000fa0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fa2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	440b      	add	r3, r1
 8000fac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6819      	ldr	r1, [r3, #0]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	7d1b      	ldrb	r3, [r3, #20]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d111      	bne.n	8000fee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	061a      	lsls	r2, r3, #24
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3306      	adds	r3, #6
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3305      	adds	r3, #5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4313      	orrs	r3, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	3204      	adds	r2, #4
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	4610      	mov	r0, r2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	6811      	ldr	r1, [r2, #0]
 8001016:	ea43 0200 	orr.w	r2, r3, r0
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	440b      	add	r3, r1
 8001020:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001024:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3303      	adds	r3, #3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	061a      	lsls	r2, r3, #24
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	4313      	orrs	r3, r2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	4610      	mov	r0, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	6811      	ldr	r1, [r2, #0]
 800104c:	ea43 0200 	orr.w	r2, r3, r0
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	440b      	add	r3, r1
 8001056:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800105a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3318      	adds	r3, #24
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4413      	add	r3, r2
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3318      	adds	r3, #24
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	440b      	add	r3, r1
 800107a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e00e      	b.n	800109e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e006      	b.n	800109e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
  }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_GetRxMessage+0x24>
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f040 80f3 	bne.w	80012b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10e      	bne.n	80010f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0e7      	b.n	80012c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d107      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0d8      	b.n	80012c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331b      	adds	r3, #27
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0204 	and.w	r2, r3, #4
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0d5b      	lsrs	r3, r3, #21
 800113e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e00b      	b.n	8001160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	331b      	adds	r3, #27
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	331b      	adds	r3, #27
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0202 	and.w	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 020f 	and.w	r2, r3, #15
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	331b      	adds	r3, #27
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	331b      	adds	r3, #27
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0a1a      	lsrs	r2, r3, #8
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4413      	add	r3, r2
 80011f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0c1a      	lsrs	r2, r3, #16
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3302      	adds	r3, #2
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4413      	add	r3, r2
 8001212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0e1a      	lsrs	r2, r3, #24
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3303      	adds	r3, #3
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3304      	adds	r3, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	4413      	add	r3, r2
 8001244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0a1a      	lsrs	r2, r3, #8
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3305      	adds	r3, #5
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0c1a      	lsrs	r2, r3, #16
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3306      	adds	r3, #6
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0e1a      	lsrs	r2, r3, #24
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3307      	adds	r3, #7
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e006      	b.n	80012c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
  }
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d002      	beq.n	80012ec <HAL_CAN_ActivateNotification+0x1e>
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d109      	bne.n	8001300 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6959      	ldr	r1, [r3, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e006      	b.n	800130e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
  }
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b08a      	sub	sp, #40	; 0x28
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d07c      	beq.n	800145a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d023      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2201      	movs	r2, #1
 8001370:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f983 	bl	8001688 <HAL_CAN_TxMailbox0CompleteCallback>
 8001382:	e016      	b.n	80013b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	e00c      	b.n	80013b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	e002      	b.n	80013b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f989 	bl	80016c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d024      	beq.n	8001406 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f963 	bl	800169c <HAL_CAN_TxMailbox1CompleteCallback>
 80013d6:	e016      	b.n	8001406 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d004      	beq.n	80013ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	e00c      	b.n	8001406 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	e002      	b.n	8001406 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f969 	bl	80016d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d024      	beq.n	800145a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001418:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f943 	bl	80016b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800142a:	e016      	b.n	800145a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d004      	beq.n	8001440 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	e00c      	b.n	800145a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e002      	b.n	800145a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f949 	bl	80016ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2210      	movs	r2, #16
 800147c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2208      	movs	r2, #8
 8001498:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f93a 	bl	8001714 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f921 	bl	8001700 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2210      	movs	r2, #16
 80014e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2208      	movs	r2, #8
 80014fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f912 	bl	8001728 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7fe ffcf 	bl	80004c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8fc 	bl	800173c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f8f5 	bl	8001750 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d07b      	beq.n	8001668 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d072      	beq.n	8001660 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03e      	beq.n	8001660 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015e8:	2b60      	cmp	r3, #96	; 0x60
 80015ea:	d02b      	beq.n	8001644 <HAL_CAN_IRQHandler+0x32a>
 80015ec:	2b60      	cmp	r3, #96	; 0x60
 80015ee:	d82e      	bhi.n	800164e <HAL_CAN_IRQHandler+0x334>
 80015f0:	2b50      	cmp	r3, #80	; 0x50
 80015f2:	d022      	beq.n	800163a <HAL_CAN_IRQHandler+0x320>
 80015f4:	2b50      	cmp	r3, #80	; 0x50
 80015f6:	d82a      	bhi.n	800164e <HAL_CAN_IRQHandler+0x334>
 80015f8:	2b40      	cmp	r3, #64	; 0x40
 80015fa:	d019      	beq.n	8001630 <HAL_CAN_IRQHandler+0x316>
 80015fc:	2b40      	cmp	r3, #64	; 0x40
 80015fe:	d826      	bhi.n	800164e <HAL_CAN_IRQHandler+0x334>
 8001600:	2b30      	cmp	r3, #48	; 0x30
 8001602:	d010      	beq.n	8001626 <HAL_CAN_IRQHandler+0x30c>
 8001604:	2b30      	cmp	r3, #48	; 0x30
 8001606:	d822      	bhi.n	800164e <HAL_CAN_IRQHandler+0x334>
 8001608:	2b10      	cmp	r3, #16
 800160a:	d002      	beq.n	8001612 <HAL_CAN_IRQHandler+0x2f8>
 800160c:	2b20      	cmp	r3, #32
 800160e:	d005      	beq.n	800161c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001610:	e01d      	b.n	800164e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161a:	e019      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001624:	e014      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800162e:	e00f      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001638:	e00a      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001642:	e005      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164c:	e000      	b.n	8001650 <HAL_CAN_IRQHandler+0x336>
            break;
 800164e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699a      	ldr	r2, [r3, #24]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800165e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2204      	movs	r2, #4
 8001666:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f872 	bl	8001764 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e16b      	b.n	8001c90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 815a 	bne.w	8001c8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80b4 	beq.w	8001c8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x314>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d02b      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x318>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x31c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x32c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x20a>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e00e      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae90 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	041a      	lsls	r2, r3, #16
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	400b      	ands	r3, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	619a      	str	r2, [r3, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e264      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d075      	beq.n	8001e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	4ba3      	ldr	r3, [pc, #652]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d00c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	4ba0      	ldr	r3, [pc, #640]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d72:	4b9d      	ldr	r3, [pc, #628]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b99      	ldr	r3, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d05b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d157      	bne.n	8001e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e23f      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x74>
 8001da2:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a90      	ldr	r2, [pc, #576]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a8a      	ldr	r2, [pc, #552]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a87      	ldr	r2, [pc, #540]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001dd4:	4b84      	ldr	r3, [pc, #528]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a83      	ldr	r2, [pc, #524]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a80      	ldr	r2, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe2e 	bl	8000a54 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7fe fe2a 	bl	8000a54 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e204      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7fe fe1a 	bl	8000a54 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e24:	f7fe fe16 	bl	8000a54 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1f0      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0xe8>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b62      	ldr	r3, [pc, #392]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c4      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4952      	ldr	r1, [pc, #328]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x2b0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fdcf 	bl	8000a54 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe fdcb 	bl	8000a54 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a5      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4940      	ldr	r1, [pc, #256]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x2b0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fdae 	bl	8000a54 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efc:	f7fe fdaa 	bl	8000a54 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e184      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d030      	beq.n	8001f88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_RCC_OscConfig+0x2b4>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe fd8e 	bl	8000a54 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fd8a 	bl	8000a54 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e164      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x200>
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_OscConfig+0x2b4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7fe fd77 	bl	8000a54 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7fe fd73 	bl	8000a54 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e14d      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a0 	beq.w	80020d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_OscConfig+0x2b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d121      	bne.n	8002016 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_OscConfig+0x2b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_RCC_OscConfig+0x2b8>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe fd39 	bl	8000a54 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	e011      	b.n	800200a <HAL_RCC_OscConfig+0x2ce>
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470000 	.word	0x42470000
 8001ff0:	42470e80 	.word	0x42470e80
 8001ff4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff8:	f7fe fd2c 	bl	8000a54 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e106      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x4e4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x2f0>
 800201e:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a80      	ldr	r2, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x32a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x312>
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x32a>
 800204e:	4b75      	ldr	r3, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a74      	ldr	r2, [pc, #464]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a71      	ldr	r2, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fcf1 	bl	8000a54 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fced 	bl	8000a54 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0c5      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x33a>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fcdb 	bl	8000a54 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fcd7 	bl	8000a54 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0af      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a55      	ldr	r2, [pc, #340]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 809b 	beq.w	8002216 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d05c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d141      	bne.n	8002178 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_OscConfig+0x4ec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fcab 	bl	8000a54 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fca7 	bl	8000a54 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e081      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002114:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	019b      	lsls	r3, r3, #6
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCC_OscConfig+0x4ec>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fc80 	bl	8000a54 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fc7c 	bl	8000a54 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e056      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x41c>
 8002176:	e04e      	b.n	8002216 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_OscConfig+0x4ec>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fc69 	bl	8000a54 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fc65 	bl	8000a54 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e03f      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x44a>
 80021a4:	e037      	b.n	8002216 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e032      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d028      	beq.n	8002212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d121      	bne.n	8002212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d11a      	bne.n	8002212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021e2:	4013      	ands	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d111      	bne.n	8002212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40007000 	.word	0x40007000
 8002224:	40023800 	.word	0x40023800
 8002228:	42470060 	.word	0x42470060

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cc      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d90c      	bls.n	8002268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e067      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fb9a 	bl	8000a54 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe fb96 	bl	8000a54 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f821 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fafa 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	0800262c 	.word	0x0800262c
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d00d      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x40>
 800241c:	2b08      	cmp	r3, #8
 800241e:	f200 80bd 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002426:	2b04      	cmp	r3, #4
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x3a>
 800242a:	e0b7      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800242e:	60bb      	str	r3, [r7, #8]
       break;
 8002430:	e0b7      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002432:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002434:	60bb      	str	r3, [r7, #8]
      break;
 8002436:	e0b4      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002438:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002440:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d04d      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244e:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	461a      	mov	r2, r3
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	ea02 0800 	and.w	r8, r2, r0
 8002466:	ea03 0901 	and.w	r9, r3, r1
 800246a:	4640      	mov	r0, r8
 800246c:	4649      	mov	r1, r9
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	014b      	lsls	r3, r1, #5
 8002478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800247c:	0142      	lsls	r2, r0, #5
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	ebb0 0008 	subs.w	r0, r0, r8
 8002486:	eb61 0109 	sbc.w	r1, r1, r9
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	018b      	lsls	r3, r1, #6
 8002494:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002498:	0182      	lsls	r2, r0, #6
 800249a:	1a12      	subs	r2, r2, r0
 800249c:	eb63 0301 	sbc.w	r3, r3, r1
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	00d9      	lsls	r1, r3, #3
 80024aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ae:	00d0      	lsls	r0, r2, #3
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	eb12 0208 	adds.w	r2, r2, r8
 80024b8:	eb43 0309 	adc.w	r3, r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0259      	lsls	r1, r3, #9
 80024c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ca:	0250      	lsls	r0, r2, #9
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	f7fd fe74 	bl	80001c8 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e04a      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	461a      	mov	r2, r3
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	ea02 0400 	and.w	r4, r2, r0
 8002502:	ea03 0501 	and.w	r5, r3, r1
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	014b      	lsls	r3, r1, #5
 8002514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002518:	0142      	lsls	r2, r0, #5
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	1b00      	subs	r0, r0, r4
 8002520:	eb61 0105 	sbc.w	r1, r1, r5
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	018b      	lsls	r3, r1, #6
 800252e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002532:	0182      	lsls	r2, r0, #6
 8002534:	1a12      	subs	r2, r2, r0
 8002536:	eb63 0301 	sbc.w	r3, r3, r1
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	00d9      	lsls	r1, r3, #3
 8002544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002548:	00d0      	lsls	r0, r2, #3
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	1912      	adds	r2, r2, r4
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	0299      	lsls	r1, r3, #10
 800255e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002562:	0290      	lsls	r0, r2, #10
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	f7fd fe28 	bl	80001c8 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	60bb      	str	r3, [r7, #8]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800259e:	60bb      	str	r3, [r7, #8]
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	68bb      	ldr	r3, [r7, #8]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4d0d      	ldr	r5, [pc, #52]	; (80025f4 <__libc_init_array+0x38>)
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	2600      	movs	r6, #0
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <__libc_init_array+0x40>)
 80025ce:	4c0c      	ldr	r4, [pc, #48]	; (8002600 <__libc_init_array+0x44>)
 80025d0:	f000 f820 	bl	8002614 <_init>
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2600      	movs	r6, #0
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	08002644 	.word	0x08002644
 80025f8:	08002644 	.word	0x08002644
 80025fc:	08002644 	.word	0x08002644
 8002600:	08002648 	.word	0x08002648

08002604 <memset>:
 8002604:	4402      	add	r2, r0
 8002606:	4603      	mov	r3, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
