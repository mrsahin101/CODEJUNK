
002_TIMER_OUTPUT_COMPARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026cc  080026cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026d4  080026d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000095e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000155f  00000000  00000000  00029623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c0  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa76  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ca8  00000000  00000000  0004b826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c450f  00000000  00000000  000554ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001199dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002728  00000000  00000000  00119a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800269c 	.word	0x0800269c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800269c 	.word	0x0800269c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <computePulse>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t computePulse(TIM_HandleTypeDef *htim, uint32_t chFrequency) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint32_t timFrequency= HAL_RCC_GetPCLK1Freq() / (htim->Instance->PSC + 1);
 80004ca:	f001 fa5b 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80004ce:	4602      	mov	r2, r0
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d6:	3301      	adds	r3, #1
 80004d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004dc:	60fb      	str	r3, [r7, #12]

  return (uint16_t)(timFrequency / chFrequency);
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	b29b      	uxth	r3, r3
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa9a 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f810 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8fc 	bl	80006f8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000500:	f000 f878 	bl	80005f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*Starting the channels in interrupt mode*/
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000504:	2100      	movs	r1, #0
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x28>)
 8000508:	f001 faba 	bl	8001a80 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 800050c:	2104      	movs	r1, #4
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <main+0x28>)
 8000510:	f001 fab6 	bl	8001a80 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x24>
 8000516:	bf00      	nop
 8000518:	2000002c 	.word	0x2000002c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 f8ae 	bl	800268c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <SystemClock_Config+0xd0>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <SystemClock_Config+0xd4>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd97 	bl	80010d4 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f93c 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fff8 	bl	80015c4 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f925 	bl	8000828 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005de:	f001 f8d7 	bl	8001790 <HAL_RCC_EnableCSS>
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  /*I added this function to make pulse value dynamic if needed*/
  CH1_FREQ = computePulse(&htim3, 50000);
 8000616:	f24c 3150 	movw	r1, #50000	; 0xc350
 800061a:	4832      	ldr	r0, [pc, #200]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800061c:	f7ff ff50 	bl	80004c0 <computePulse>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000626:	801a      	strh	r2, [r3, #0]
  CH2_FREQ = computePulse(&htim3, 100000);
 8000628:	4930      	ldr	r1, [pc, #192]	; (80006ec <MX_TIM3_Init+0xf8>)
 800062a:	482e      	ldr	r0, [pc, #184]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800062c:	f7ff ff48 	bl	80004c0 <computePulse>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_TIM3_Init+0xfc>)
 8000636:	801a      	strh	r2, [r3, #0]

  htim3.Instance = TIM3;
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800063a:	4a2e      	ldr	r2, [pc, #184]	; (80006f4 <MX_TIM3_Init+0x100>)
 800063c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler =1;
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_TIM3_Init+0xf0>)
 8000640:	2201      	movs	r2, #1
 8000642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_TIM3_Init+0xf0>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_TIM3_Init+0xf0>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800065e:	4821      	ldr	r0, [pc, #132]	; (80006e4 <MX_TIM3_Init+0xf0>)
 8000660:	f001 f9bf 	bl	80019e2 <HAL_TIM_OC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800066a:	f000 f8dd 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4619      	mov	r1, r3
 800067c:	4819      	ldr	r0, [pc, #100]	; (80006e4 <MX_TIM3_Init+0xf0>)
 800067e:	f001 ff51 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 f8ce 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800068c:	2330      	movs	r3, #48	; 0x30
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = CH1_FREQ;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_TIM3_Init+0xf4>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b29b      	uxth	r3, r3
 8000696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <MX_TIM3_Init+0xf0>)
 80006a8:	f001 fc08 	bl	8001ebc <HAL_TIM_OC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f8b9 	bl	8000828 <Error_Handler>
  }
  sConfigOC.Pulse = CH2_FREQ;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_TIM3_Init+0xfc>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2204      	movs	r2, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <MX_TIM3_Init+0xf0>)
 80006c6:	f001 fbf9 	bl	8001ebc <HAL_TIM_OC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80006d0:	f000 f8aa 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <MX_TIM3_Init+0xf0>)
 80006d6:	f000 f8fd 	bl	80008d4 <HAL_TIM_MspPostInit>

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000002c 	.word	0x2000002c
 80006e8:	20000028 	.word	0x20000028
 80006ec:	000186a0 	.word	0x000186a0
 80006f0:	2000002a 	.word	0x2000002a
 80006f4:	40000400 	.word	0x40000400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_GPIO_Init+0x9c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_GPIO_Init+0x9c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <MX_GPIO_Init+0xa0>)
 800076a:	f000 fc7f 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0xa0>)
 8000788:	f000 fad4 	bl	8000d34 <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020c00 	.word	0x40020c00

0800079c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t pulse;

  /* TIMx_CH1 toggling with frequency = 25KHz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7f1b      	ldrb	r3, [r3, #28]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10d      	bne.n	80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
  {
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80007ac:	2100      	movs	r1, #0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f001 fbe0 	bl	8001f74 <HAL_TIM_ReadCapturedValue>
 80007b4:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ));
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	440a      	add	r2, r1
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* TIM2_CH2 toggling with frequency = 50KHz */
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7f1b      	ldrb	r3, [r3, #28]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d10d      	bne.n	80007ec <HAL_TIM_OC_DelayElapsedCallback+0x50>
  {
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f001 fbce 	bl	8001f74 <HAL_TIM_ReadCapturedValue>
 80007d8:	60f8      	str	r0, [r7, #12]
    /* Set the Capture Compare Register value */
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ));
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	440a      	add	r2, r1
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000028 	.word	0x20000028
 80007f8:	2000002a 	.word	0x2000002a

080007fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d104      	bne.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000814:	f000 fc43 	bl	800109e <HAL_GPIO_TogglePin>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40000400 	.word	0x40000400
 8000824:	40020c00 	.word	0x40020c00

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fa1c 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_TIM_OC_MspInit+0x48>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d115      	bne.n	80008c2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_TIM_OC_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <HAL_TIM_OC_MspInit+0x4c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_TIM_OC_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f000 fa05 	bl	8000cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008bc:	201d      	movs	r0, #29
 80008be:	f000 fa1e 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40000400 	.word	0x40000400
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <HAL_TIM_MspPostInit+0x68>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d11d      	bne.n	8000932 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_TIM_MspPostInit+0x6c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_TIM_MspPostInit+0x6c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_TIM_MspPostInit+0x6c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_TIM_MspPostInit+0x70>)
 800092e:	f000 fa01 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000400 	.word	0x40000400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800094c:	f001 f82e 	bl	80019ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x8>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f89a 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM3_IRQHandler+0x10>)
 80009a6:	f001 f981 	bl	8001cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f001 fe1d 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd71 	bl	80004f0 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	080026dc 	.word	0x080026dc
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	20000078 	.word	0x20000078

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f92b 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fee8 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f943 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f90b 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000074 	.word	0x20000074

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000074 	.word	0x20000074

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <__NVIC_EnableIRQ+0x38>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff29 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff3e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff31 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa2 	bl	8000c6c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e16b      	b.n	8001028 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 815a 	bne.w	8001022 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d017      	beq.n	8000e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d123      	bne.n	8000e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0203 	and.w	r2, r3, #3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80b4 	beq.w	8001022 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b60      	ldr	r3, [pc, #384]	; (8001040 <HAL_GPIO_Init+0x30c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a5f      	ldr	r2, [pc, #380]	; (8001040 <HAL_GPIO_Init+0x30c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <HAL_GPIO_Init+0x30c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	; (8001044 <HAL_GPIO_Init+0x310>)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a52      	ldr	r2, [pc, #328]	; (8001048 <HAL_GPIO_Init+0x314>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d02b      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a51      	ldr	r2, [pc, #324]	; (800104c <HAL_GPIO_Init+0x318>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x222>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a50      	ldr	r2, [pc, #320]	; (8001050 <HAL_GPIO_Init+0x31c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x21e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x21a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4e      	ldr	r2, [pc, #312]	; (8001058 <HAL_GPIO_Init+0x324>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x216>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4d      	ldr	r2, [pc, #308]	; (800105c <HAL_GPIO_Init+0x328>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4c      	ldr	r2, [pc, #304]	; (8001060 <HAL_GPIO_Init+0x32c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x20e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_GPIO_Init+0x330>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x20a>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00e      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f3e:	2308      	movs	r3, #8
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x310>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_GPIO_Init+0x334>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae90 	bls.w	8000d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40021400 	.word	0x40021400
 8001060:	40021800 	.word	0x40021800
 8001064:	40021c00 	.word	0x40021c00
 8001068:	40013c00 	.word	0x40013c00

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4013      	ands	r3, r2
 80010b6:	041a      	lsls	r2, r3, #16
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	400b      	ands	r3, r1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e264      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d075      	beq.n	80011de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f2:	4ba3      	ldr	r3, [pc, #652]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d112      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110a:	4b9d      	ldr	r3, [pc, #628]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001116:	d10b      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4b99      	ldr	r3, [pc, #612]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d05b      	beq.n	80011dc <HAL_RCC_OscConfig+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d157      	bne.n	80011dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e23f      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x74>
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a90      	ldr	r2, [pc, #576]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x98>
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a8a      	ldr	r2, [pc, #552]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 800116c:	4b84      	ldr	r3, [pc, #528]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a83      	ldr	r2, [pc, #524]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a80      	ldr	r2, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fcb4 	bl	8000af8 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fcb0 	bl	8000af8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e204      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xc0>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fca0 	bl	8000af8 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fc9c 	bl	8000af8 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1f0      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0xe8>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c4      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4952      	ldr	r1, [pc, #328]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <HAL_RCC_OscConfig+0x2b0>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fc55 	bl	8000af8 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc51 	bl	8000af8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a5      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4940      	ldr	r1, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x2b0>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc34 	bl	8000af8 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc30 	bl	8000af8 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e184      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d030      	beq.n	8001320 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d016      	beq.n	80012f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x2b4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc14 	bl	8000af8 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc10 	bl	8000af8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e164      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x200>
 80012f2:	e015      	b.n	8001320 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x2b4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fbfd 	bl	8000af8 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fbf9 	bl	8000af8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e14d      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a0 	beq.w	800146e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d121      	bne.n	80013ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbbf 	bl	8000af8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e011      	b.n	80013a2 <HAL_RCC_OscConfig+0x2ce>
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	42470000 	.word	0x42470000
 8001388:	42470e80 	.word	0x42470e80
 800138c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001390:	f7ff fbb2 	bl	8000af8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e106      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <HAL_RCC_OscConfig+0x4e4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2f0>
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a80      	ldr	r2, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	e01c      	b.n	80013fe <HAL_RCC_OscConfig+0x32a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x312>
 80013cc:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e00b      	b.n	80013fe <HAL_RCC_OscConfig+0x32a>
 80013e6:	4b75      	ldr	r3, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a74      	ldr	r2, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fb77 	bl	8000af8 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb73 	bl	8000af8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0c5      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ee      	beq.n	800140e <HAL_RCC_OscConfig+0x33a>
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb61 	bl	8000af8 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb5d 	bl	8000af8 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0af      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a55      	ldr	r2, [pc, #340]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 809b 	beq.w	80015ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d05c      	beq.n	800153e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d141      	bne.n	8001510 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb31 	bl	8000af8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb2d 	bl	8000af8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e081      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	061b      	lsls	r3, r3, #24
 80014dc:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb06 	bl	8000af8 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb02 	bl	8000af8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e056      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x41c>
 800150e:	e04e      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff faef 	bl	8000af8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff faeb 	bl	8000af8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e03f      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x44a>
 800153c:	e037      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e032      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d028      	beq.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d121      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d11a      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157a:	4013      	ands	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001580:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001582:	4293      	cmp	r3, r2
 8001584:	d111      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40007000 	.word	0x40007000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	42470060 	.word	0x42470060

080015c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0cc      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d90c      	bls.n	8001600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b8      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	494d      	ldr	r1, [pc, #308]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d044      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d119      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e07f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167e:	2b03      	cmp	r3, #3
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e067      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 0203 	bic.w	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b4:	f7ff fa20 	bl	8000af8 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	f7ff fa1c 	bl	8000af8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e04f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 020c 	and.w	r2, r3, #12
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d1eb      	bne.n	80016bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d20c      	bcs.n	800170c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e032      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4916      	ldr	r1, [pc, #88]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	490e      	ldr	r1, [pc, #56]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174a:	f000 f82d 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 800174e:	4602      	mov	r2, r0
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	490a      	ldr	r1, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	5ccb      	ldrb	r3, [r1, r3]
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f980 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	080026b4 	.word	0x080026b4
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_RCC_EnableCSS+0x14>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	4247004c 	.word	0x4247004c

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	2300      	movs	r3, #0
 80017ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	4b67      	ldr	r3, [pc, #412]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d00d      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f200 80bd 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x1a4>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x34>
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017da:	e0b7      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017de:	60bb      	str	r3, [r7, #8]
       break;
 80017e0:	e0b7      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b61      	ldr	r3, [pc, #388]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017e4:	60bb      	str	r3, [r7, #8]
      break;
 80017e6:	e0b4      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d04d      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	ea02 0800 	and.w	r8, r2, r0
 8001816:	ea03 0901 	and.w	r9, r3, r1
 800181a:	4640      	mov	r0, r8
 800181c:	4649      	mov	r1, r9
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	014b      	lsls	r3, r1, #5
 8001828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800182c:	0142      	lsls	r2, r0, #5
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	ebb0 0008 	subs.w	r0, r0, r8
 8001836:	eb61 0109 	sbc.w	r1, r1, r9
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	018b      	lsls	r3, r1, #6
 8001844:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001848:	0182      	lsls	r2, r0, #6
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	eb63 0301 	sbc.w	r3, r3, r1
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	00d9      	lsls	r1, r3, #3
 800185a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800185e:	00d0      	lsls	r0, r2, #3
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	eb12 0208 	adds.w	r2, r2, r8
 8001868:	eb43 0309 	adc.w	r3, r3, r9
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0259      	lsls	r1, r3, #9
 8001876:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800187a:	0250      	lsls	r0, r2, #9
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	461a      	mov	r2, r3
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f7fe fc9c 	bl	80001c8 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e04a      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	461a      	mov	r2, r3
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	ea02 0400 	and.w	r4, r2, r0
 80018b2:	ea03 0501 	and.w	r5, r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	014b      	lsls	r3, r1, #5
 80018c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c8:	0142      	lsls	r2, r0, #5
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	1b00      	subs	r0, r0, r4
 80018d0:	eb61 0105 	sbc.w	r1, r1, r5
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	018b      	lsls	r3, r1, #6
 80018de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018e2:	0182      	lsls	r2, r0, #6
 80018e4:	1a12      	subs	r2, r2, r0
 80018e6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	00d9      	lsls	r1, r3, #3
 80018f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018f8:	00d0      	lsls	r0, r2, #3
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	1912      	adds	r2, r2, r4
 8001900:	eb45 0303 	adc.w	r3, r5, r3
 8001904:	f04f 0000 	mov.w	r0, #0
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	0299      	lsls	r1, r3, #10
 800190e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001912:	0290      	lsls	r0, r2, #10
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	f7fe fc50 	bl	80001c8 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	60bb      	str	r3, [r7, #8]
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800194e:	60bb      	str	r3, [r7, #8]
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	68bb      	ldr	r3, [r7, #8]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080026c4 	.word	0x080026c4

080019ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_NMI_IRQHandler+0x20>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d104      	bne.n	80019c6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80019bc:	f000 f80a 	bl	80019d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	701a      	strb	r2, [r3, #0]
  }
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	4002380e 	.word	0x4002380e

080019d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e041      	b.n	8001a78 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d106      	bne.n	8001a0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7fe ff3b 	bl	8000884 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f000 fb09 	bl	8002038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_TIM_OC_Start_IT+0x28>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e022      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d109      	bne.n	8001ac2 <HAL_TIM_OC_Start_IT+0x42>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	e015      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d109      	bne.n	8001adc <HAL_TIM_OC_Start_IT+0x5c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e008      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0c7      	b.n	8001c86 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d104      	bne.n	8001b06 <HAL_TIM_OC_Start_IT+0x86>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	e013      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d104      	bne.n	8001b16 <HAL_TIM_OC_Start_IT+0x96>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	e00b      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d104      	bne.n	8001b26 <HAL_TIM_OC_Start_IT+0xa6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b24:	e003      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d841      	bhi.n	8001bb8 <HAL_TIM_OC_Start_IT+0x138>
 8001b34:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <HAL_TIM_OC_Start_IT+0xbc>)
 8001b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001bb9 	.word	0x08001bb9
 8001b44:	08001bb9 	.word	0x08001bb9
 8001b48:	08001bb9 	.word	0x08001bb9
 8001b4c:	08001b83 	.word	0x08001b83
 8001b50:	08001bb9 	.word	0x08001bb9
 8001b54:	08001bb9 	.word	0x08001bb9
 8001b58:	08001bb9 	.word	0x08001bb9
 8001b5c:	08001b95 	.word	0x08001b95
 8001b60:	08001bb9 	.word	0x08001bb9
 8001b64:	08001bb9 	.word	0x08001bb9
 8001b68:	08001bb9 	.word	0x08001bb9
 8001b6c:	08001ba7 	.word	0x08001ba7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	60da      	str	r2, [r3, #12]
      break;
 8001b80:	e01d      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	60da      	str	r2, [r3, #12]
      break;
 8001b92:	e014      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0208 	orr.w	r2, r2, #8
 8001ba2:	60da      	str	r2, [r3, #12]
      break;
 8001ba4:	e00b      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0210 	orr.w	r2, r2, #16
 8001bb4:	60da      	str	r2, [r3, #12]
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
      break;
 8001bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d15f      	bne.n	8001c84 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fc83 	bl	80024d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <HAL_TIM_OC_Start_IT+0x210>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_TIM_OC_Start_IT+0x166>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <HAL_TIM_OC_Start_IT+0x214>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_OC_Start_IT+0x16a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_TIM_OC_Start_IT+0x16c>
 8001bea:	2300      	movs	r3, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_TIM_OC_Start_IT+0x210>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c12:	d01d      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_TIM_OC_Start_IT+0x218>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_TIM_OC_Start_IT+0x21c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <HAL_TIM_OC_Start_IT+0x220>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_TIM_OC_Start_IT+0x214>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_TIM_OC_Start_IT+0x224>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_TIM_OC_Start_IT+0x1d0>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_TIM_OC_Start_IT+0x228>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d010      	beq.n	8001c84 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c72:	e007      	b.n	8001c84 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40010400 	.word	0x40010400
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40014000 	.word	0x40014000
 8001ca8:	40001800 	.word	0x40001800

08001cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0202 	mvn.w	r2, #2
 8001cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f984 	bl	8001ffc <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fd50 	bl	800079c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f987 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0204 	mvn.w	r2, #4
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f95a 	bl	8001ffc <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fd26 	bl	800079c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f95d 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d122      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0208 	mvn.w	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f930 	bl	8001ffc <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fcfc 	bl	800079c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f933 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d122      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d11b      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0210 	mvn.w	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f906 	bl	8001ffc <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fcd2 	bl	800079c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f909 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fce6 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fbea 	bl	8002630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8ce 	bl	8002024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0220 	mvn.w	r2, #32
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fbb4 	bl	800261c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_OC_ConfigChannel+0x1e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e048      	b.n	8001f6c <HAL_TIM_OC_ConfigChannel+0xb0>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d839      	bhi.n	8001f5c <HAL_TIM_OC_ConfigChannel+0xa0>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f25 	.word	0x08001f25
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	08001f5d 	.word	0x08001f5d
 8001efc:	08001f5d 	.word	0x08001f5d
 8001f00:	08001f33 	.word	0x08001f33
 8001f04:	08001f5d 	.word	0x08001f5d
 8001f08:	08001f5d 	.word	0x08001f5d
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f41 	.word	0x08001f41
 8001f14:	08001f5d 	.word	0x08001f5d
 8001f18:	08001f5d 	.word	0x08001f5d
 8001f1c:	08001f5d 	.word	0x08001f5d
 8001f20:	08001f4f 	.word	0x08001f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f924 	bl	8002178 <TIM_OC1_SetConfig>
      break;
 8001f30:	e017      	b.n	8001f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f98d 	bl	8002258 <TIM_OC2_SetConfig>
      break;
 8001f3e:	e010      	b.n	8001f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f9fc 	bl	8002344 <TIM_OC3_SetConfig>
      break;
 8001f4c:	e009      	b.n	8001f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa69 	bl	800242c <TIM_OC4_SetConfig>
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d831      	bhi.n	8001fec <HAL_TIM_ReadCapturedValue+0x78>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fc5 	.word	0x08001fc5
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08001fed 	.word	0x08001fed
 8001f9c:	08001fed 	.word	0x08001fed
 8001fa0:	08001fcf 	.word	0x08001fcf
 8001fa4:	08001fed 	.word	0x08001fed
 8001fa8:	08001fed 	.word	0x08001fed
 8001fac:	08001fed 	.word	0x08001fed
 8001fb0:	08001fd9 	.word	0x08001fd9
 8001fb4:	08001fed 	.word	0x08001fed
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	08001fed 	.word	0x08001fed
 8001fc0:	08001fe3 	.word	0x08001fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	60fb      	str	r3, [r7, #12]

      break;
 8001fcc:	e00f      	b.n	8001fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	60fb      	str	r3, [r7, #12]

      break;
 8001fd6:	e00a      	b.n	8001fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	60fb      	str	r3, [r7, #12]

      break;
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	60fb      	str	r3, [r7, #12]

      break;
 8001fea:	e000      	b.n	8001fee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001fec:	bf00      	nop
  }

  return tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <TIM_Base_SetConfig+0x114>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d00f      	beq.n	8002078 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <TIM_Base_SetConfig+0x118>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00b      	beq.n	8002078 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <TIM_Base_SetConfig+0x11c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3b      	ldr	r2, [pc, #236]	; (8002158 <TIM_Base_SetConfig+0x120>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3a      	ldr	r2, [pc, #232]	; (800215c <TIM_Base_SetConfig+0x124>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d108      	bne.n	800208a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2f      	ldr	r2, [pc, #188]	; (800214c <TIM_Base_SetConfig+0x114>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02b      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d027      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <TIM_Base_SetConfig+0x118>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d023      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <TIM_Base_SetConfig+0x11c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <TIM_Base_SetConfig+0x120>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01b      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a29      	ldr	r2, [pc, #164]	; (800215c <TIM_Base_SetConfig+0x124>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d017      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <TIM_Base_SetConfig+0x128>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <TIM_Base_SetConfig+0x12c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00f      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <TIM_Base_SetConfig+0x130>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00b      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <TIM_Base_SetConfig+0x134>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <TIM_Base_SetConfig+0x138>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <TIM_Base_SetConfig+0x13c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d108      	bne.n	80020fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <TIM_Base_SetConfig+0x114>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_Base_SetConfig+0xf8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <TIM_Base_SetConfig+0x124>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000
 8002150:	40000400 	.word	0x40000400
 8002154:	40000800 	.word	0x40000800
 8002158:	40000c00 	.word	0x40000c00
 800215c:	40010400 	.word	0x40010400
 8002160:	40014000 	.word	0x40014000
 8002164:	40014400 	.word	0x40014400
 8002168:	40014800 	.word	0x40014800
 800216c:	40001800 	.word	0x40001800
 8002170:	40001c00 	.word	0x40001c00
 8002174:	40002000 	.word	0x40002000

08002178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f023 0302 	bic.w	r3, r3, #2
 80021c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a20      	ldr	r2, [pc, #128]	; (8002250 <TIM_OC1_SetConfig+0xd8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_OC1_SetConfig+0x64>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <TIM_OC1_SetConfig+0xdc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10c      	bne.n	80021f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f023 0308 	bic.w	r3, r3, #8
 80021e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a15      	ldr	r2, [pc, #84]	; (8002250 <TIM_OC1_SetConfig+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_OC1_SetConfig+0x8e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <TIM_OC1_SetConfig+0xdc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d111      	bne.n	800222a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800220c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	621a      	str	r2, [r3, #32]
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40010000 	.word	0x40010000
 8002254:	40010400 	.word	0x40010400

08002258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f023 0210 	bic.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0320 	bic.w	r3, r3, #32
 80022a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <TIM_OC2_SetConfig+0xe4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_OC2_SetConfig+0x68>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <TIM_OC2_SetConfig+0xe8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d10d      	bne.n	80022dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <TIM_OC2_SetConfig+0xe4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <TIM_OC2_SetConfig+0x94>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <TIM_OC2_SetConfig+0xe8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d113      	bne.n	8002314 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40010400 	.word	0x40010400

08002344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800238c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <TIM_OC3_SetConfig+0xe0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_OC3_SetConfig+0x66>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <TIM_OC3_SetConfig+0xe4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10d      	bne.n	80023c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a16      	ldr	r2, [pc, #88]	; (8002424 <TIM_OC3_SetConfig+0xe0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d003      	beq.n	80023d6 <TIM_OC3_SetConfig+0x92>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <TIM_OC3_SetConfig+0xe4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	621a      	str	r2, [r3, #32]
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40010000 	.word	0x40010000
 8002428:	40010400 	.word	0x40010400

0800242c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	031b      	lsls	r3, r3, #12
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <TIM_OC4_SetConfig+0xa4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d003      	beq.n	8002494 <TIM_OC4_SetConfig+0x68>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <TIM_OC4_SetConfig+0xa8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d109      	bne.n	80024a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800249a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010400 	.word	0x40010400

080024d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e05a      	b.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d01d      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40010000 	.word	0x40010000
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40000c00 	.word	0x40000c00
 8002610:	40010400 	.word	0x40010400
 8002614:	40014000 	.word	0x40014000
 8002618:	40001800 	.word	0x40001800

0800261c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	4d0d      	ldr	r5, [pc, #52]	; (800267c <__libc_init_array+0x38>)
 8002648:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264a:	1b64      	subs	r4, r4, r5
 800264c:	10a4      	asrs	r4, r4, #2
 800264e:	2600      	movs	r6, #0
 8002650:	42a6      	cmp	r6, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	4d0b      	ldr	r5, [pc, #44]	; (8002684 <__libc_init_array+0x40>)
 8002656:	4c0c      	ldr	r4, [pc, #48]	; (8002688 <__libc_init_array+0x44>)
 8002658:	f000 f820 	bl	800269c <_init>
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	2600      	movs	r6, #0
 8002662:	42a6      	cmp	r6, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	f855 3b04 	ldr.w	r3, [r5], #4
 800266c:	4798      	blx	r3
 800266e:	3601      	adds	r6, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	f855 3b04 	ldr.w	r3, [r5], #4
 8002676:	4798      	blx	r3
 8002678:	3601      	adds	r6, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	080026d4 	.word	0x080026d4
 8002680:	080026d4 	.word	0x080026d4
 8002684:	080026d4 	.word	0x080026d4
 8002688:	080026d8 	.word	0x080026d8

0800268c <memset>:
 800268c:	4402      	add	r2, r0
 800268e:	4603      	mov	r3, r0
 8002690:	4293      	cmp	r3, r2
 8002692:	d100      	bne.n	8002696 <memset+0xa>
 8002694:	4770      	bx	lr
 8002696:	f803 1b01 	strb.w	r1, [r3], #1
 800269a:	e7f9      	b.n	8002690 <memset+0x4>

0800269c <_init>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr

080026a8 <_fini>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	bf00      	nop
 80026ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ae:	bc08      	pop	{r3}
 80026b0:	469e      	mov	lr, r3
 80026b2:	4770      	bx	lr
